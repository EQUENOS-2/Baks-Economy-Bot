import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio, os
import requests
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
from datetime import datetime, timedelta

from pymongo import MongoClient
app_string = str(os.environ.get('cluster_string'))
cluster = MongoClient(app_string)

#----------------------------------------------+
#                 Constants                    |
#----------------------------------------------+
from failures import CooldownResetSignal

db = cluster["guilds"]

mass_dm_errors = {}

reaction_add_timers = {}

#----------------------------------------------+
#                  Functions                   |
#----------------------------------------------+
from functions import detect, quote_list, antiformat, is_moderator, ReactionRolesConfig


def unwrap_isolation(text, s):
    length, wid, i = len(text), len(s), 0
    out = ""
    while i < length:
        if text[i:i + wid] == s:
            i += wid
            while i < length and text[i:i + wid] != s:
                out += text[i]
                i += 1
            out += "\n"
        i += 1
    return out.strip()


def color_from_string(_color):
    Col = discord.Color
    _color = _color.lower()
    if "," in _color:
        rgb = [c.strip() for c in _color.split(",")]
        rgb = [int(c) for c in rgb]
        if len(rgb) < 3 or len(rgb) > 3:
            _color = Col.default()
        else:
            in_range_bools = [(c >= 0 and c < 256) for c in rgb]
            if False in in_range_bools:
                _color = Col.default()
            else:
                _color = Col.from_rgb(*rgb)
    else:
        colors = {
            "green": Col.green(), "dark_green": Col.dark_green(),
            "red": Col.red(), "dark_red": Col.dark_red(),
            "blue": Col.default(), "dark_blue": Col.dark_blue(),
            "magenta": Col.magenta(), "teal": Col.teal(),
            "gold": Col.gold(), "orange": Col.orange(),
            "purple": Col.purple(), "blurple": Col.blurple(),
            "white": Col.from_rgb(255, 255, 255), "black": Col.from_rgb(1, 1, 1)
        }
        if _color not in colors:
            _color = Col.default()
        else:
            _color = colors[_color]
    return _color


def embed_from_string(text_input):
    # Carving logical parts
    _title = unwrap_isolation(text_input, "==")
    _desc = unwrap_isolation(text_input, "--")
    _color = unwrap_isolation(text_input, "##")
    _image_url = unwrap_isolation(text_input, "&&")
    _thumb_url = unwrap_isolation(text_input, "++")
    _footer_url = unwrap_isolation(text_input, ";;")
    _footer_text = unwrap_isolation(text_input, "::")
    # Interpreting some values
    _color = color_from_string(_color)

    emb = discord.Embed(
        title=_title,
        description=_desc,
        color=_color
    )
    if _image_url != "":
        emb.set_image(url=_image_url)
    if _thumb_url != "":
        emb.set_thumbnail(url=_thumb_url)
    if _footer_text != "" or _footer_url != "":
        emb.set_footer(text=_footer_text, icon_url=_footer_url)
    
    return emb


async def get_message(channel, msg_id):
    try:
        return await channel.fetch_message(msg_id)
    except Exception:
        return None


async def try_send_and_count(channel_or_user, message_id, content=None, embed=None, files=None):
    try:
        await channel_or_user.send(content=content, embed=embed, files=files)
    except Exception:
        global mass_dm_errors
        if message_id not in mass_dm_errors:
            mass_dm_errors[message_id] = 1
        else:
            mass_dm_errors[message_id] += 1


class Welcome_card:
    def __init__(self, member):
        self.name = str(member)
        self.count = member.guild.member_count
        self.avatar_url = member.avatar_url
        self.bg = Image.open("images/welcome_card.png")
        self.draw = None
        self.font = None

    def paste_avatar(self, ulc, width):
        r = requests.get(self.avatar_url)
        avatar = Image.open( BytesIO(r.content ) ).resize((width, width))

        mask = Image.new('L', (width, width), 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0) + (width, width), fill=255)

        self.bg.paste(avatar, (*ulc, ulc[0] + width, ulc[1] + width), mask)
    
    def write(self, center, text, font_size, fill=None):
        if self.font is None:
            self.font = ImageFont.truetype("fonts/vida33pro.otf", size=font_size, encoding="utf-8")
        else:
            self.font.size = font_size
        if self.draw is None:
            self.draw = ImageDraw.Draw(self.bg)
        
        tsize = self.draw.textsize(text, font=self.font)
        tulc = (center[0] - tsize[0] // 2, center[1] - tsize[1] // 2)
        self.draw.text(tulc, text, font=self.font, fill=fill)
    
    def save_as(self, path, _format="PNG"):
        self.bg.save(path, _format)

    def generate(self):
        self.paste_avatar((178, 73), 124)
        self.write((242, 235), self.name, 37, (255, 108, 0))
        self.write((240, 233), self.name, 37)
        self.write((242, 32), str(self.count), 37, (255, 108, 0))
        self.write((240, 30), str(self.count), 37)

        bimg = BytesIO()
        self.bg.save(bimg, format='PNG')
        bimg = bimg.getvalue()
        
        return BytesIO(bimg)


class utilities(commands.Cog):
    def __init__(self, client):
        self.client = client

    #----------------------------------------------+
    #                   Events                     |
    #----------------------------------------------+
    @commands.Cog.listener()
    async def on_ready(self):
        print(">> Utilities cog is loaded")


    @commands.Cog.listener()
    async def on_member_join(self, member):
        collection = db["msg_manip"]
        result = collection.find_one(
            {"_id": member.guild.id},
            projection={
                "welcome_channel": True,
                "welcome_message": True
            }
        )
        if result is None:
            result = {}
        channel = member.guild.get_channel( result.get("welcome_channel", 0) )
        message = result.get("welcome_message")

        if channel is not None:
            wc = Welcome_card(member)
        
            message = message.replace("{member_count}", str(wc.count))
            message = message.replace("{user}", antiformat(wc.name))
            message = message.replace("{server}", str(member.guild.name))

            wemb = discord.Embed(
                description=message,
                color=member.guild.me.color
            )
            wemb.set_image(url=f"attachment://welcome.png")
            await channel.send(str(member.mention), embed=wemb, file=discord.File(wc.generate(), "welcome.png"))

    
    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        server_rr = ReactionRolesConfig(payload.guild_id)
        emojis = server_rr.get_roles(payload.message_id)
        # If emoji is registered
        if str(payload.emoji) in emojis:
            guild = self.client.get_guild(payload.guild_id)
            role = guild.get_role(emojis[str(payload.emoji)])
            # If the role still exists
            if role is not None:
                member = guild.get_member(payload.user_id)
                if role not in member.roles:
                    try:
                        await member.add_roles(role)

                    except Exception:
                        pass

    
    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload):
        server_rr = ReactionRolesConfig(payload.guild_id)
        emojis = server_rr.get_roles(payload.message_id)
        # If emoji is registered
        if str(payload.emoji) in emojis:
            guild = self.client.get_guild(payload.guild_id)
            role = guild.get_role(emojis[str(payload.emoji)])
            # If the role still exists
            if role is not None:
                member = guild.get_member(payload.user_id)
                if role in member.roles:
                    try:
                        await member.remove_roles(role)

                    except Exception:
                        pass

    #----------------------------------------------+
    #                  Commands                    |
    #----------------------------------------------+
    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.check_any(
        commands.has_permissions(administrator=True),
        is_moderator() )
    @commands.command(
        aliases=["dm-role", "mass-send", "role-dm", "dr"],
        description="—Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏",
        usage="@–†–æ–ª—å –¢–µ–∫—Å—Ç",
        brief="@Member –í—ã–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª" )
    async def dm_role(self, ctx, role: discord.Role, *, text):
        atts = ctx.message.attachments

        paper = f"üì¢ **{ctx.guild.name}**\n\n{text}"[:2000]
        _files = [await att.to_file() for att in atts]

        total_targets = 0
        errors = 0
        progbar = await ctx.send(f"üïë –ò–¥—ë—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...\n–í—ã—Å–ª–∞–ª —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        for member in ctx.guild.members:
            if role in member.roles:
                total_targets += 1
                #self.client.loop.create_task(try_send_and_count(member, ctx.message.id, paper, files=_files))
                try:
                    await member.send(paper, files=_files)
                except Exception:
                    errors += 1
                if total_targets % 50 == 0:
                    try:
                        await progbar.edit(content=f"üïë –ò–¥—ë—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...\n–í—ã—Å–ª–∞–ª —É–∂–µ {total_targets}+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
                    except Exception:
                        pass
        
        # await ctx.send("üïë –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...")

        # global mass_dm_errors
        # error_targets = mass_dm_errors.get(ctx.message.id, 0)
        # if ctx.message.id in mass_dm_errors:
        #     mass_dm_errors.pop(ctx.message.id)

        reply = discord.Embed(
            title="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description=(
                f"**–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:** –æ–±–ª–∞–¥–∞—Ç–µ–ª–∏ —Ä–æ–ª–∏ <@&{role.id}>\n"
                f"**–í—Å–µ–≥–æ:** {total_targets}\n"
                f"**–ü–æ–ª—É—á–∏–ª–∏:** {total_targets - errors}\n"
            ),
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.check_any(
        commands.has_permissions(administrator=True),
        is_moderator() )
    @commands.command(
        description=(
            "—Å–æ–∑–¥–∞—ë—Ç —Ä–∞–º–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Ç–µ–∫—Å—Ç–æ–º, –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç.–ø.\n"
            "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–∞–º–∫–∏:\n"
            "> `==–ó–∞–≥–æ–ª–æ–≤–æ–∫==` - –∑–∞–≥–æ–ª–æ–≤–æ–∫\n"
            "> `--–¢–µ–∫—Å—Ç--` - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫\n"
            "> `##—Ü–≤–µ—Ç##` - —Ü–≤–µ—Ç (—Å–º. –Ω–∏–∂–µ)\n"
            "> `&&url_–∫–∞—Ä—Ç–∏–Ω–∫–∏&&` - –±–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞\n"
            "> `++url_–∫–∞—Ä—Ç–∏–Ω–∫–∏++` - –º–∞–ª–µ–Ω—å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞\n"
            "> `;;url_–∫–∞—Ä—Ç–∏–Ω–∫–∏;;` - –∏–∫–æ–Ω–∫–∞ —Ñ—É—Ç–µ—Ä–∞\n"
            "> `::–¢–µ–∫—Å—Ç::` - —Ç–µ–∫—Å—Ç —Ñ—É—Ç–µ—Ä–∞\n"
            "**–û —Ü–≤–µ—Ç–µ:** —Ü–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ RGB\n"
            "–í RGB —Ñ–æ—Ä–º–∞—Ç–µ –º–µ–∂–¥—É `##` –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä `##23, 123, 123##`\n"
            "–°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤: `red, dark_red, blue, dark_blue, green, dark_green, gold, teal, magenta, purple, blurple, orange, white, black`"
        ),
        brief="==–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ== --–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª—å **–ü–æ–º–æ—â–Ω–∏–∫**!-- ##gold##" )
    async def embed(self, ctx, *, text_input):
        emb = embed_from_string(text_input)
        
        await ctx.send(embed=emb)
        try:
            await ctx.author.send(f"{ctx.prefix}embed {antiformat(text_input)}")
        except Exception:
            pass
        try:
            await ctx.message.delete()
        except Exception:
            pass


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.check_any(
        commands.has_permissions(administrator=True),
        is_moderator() )
    @commands.command(
        description="—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–∏ —Ä–∞–º–∫–∏ (—ç–º–±–µ–¥—ã) (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –∫–æ–º–∞–Ω–¥–µ `embed`)",
        usage="ID_—Å–æ–æ–±—â–µ–Ω–∏—è –¢–µ–∫—Å—Ç_–¥–ª—è_—ç–º–±–µ–¥–∞" )
    async def edit(self, ctx, _id, *, text_input):
        if not _id.isdigit():
            reply = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"ID –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä.\n–í–≤–µ–¥–µ–Ω–æ: {_id}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
            await ctx.send(embed=reply)
        
        else:
            message = await get_message(ctx.channel, int(_id))
            if message is None:
                reply = discord.Embed(
                    title="üîé –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description=f"–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: `{_id}`"
                )
                reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                await ctx.send(embed=reply)
            
            elif message.author.id != self.client.user.id:
                reply = discord.Embed(
                    title="‚ùå –≠—Ç–æ –Ω–µ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    description="–Ø –Ω–µ –∏–º–µ—é –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                await ctx.send(embed=reply)
            
            else:
                emb = embed_from_string(text_input)
                
                await message.edit(embed=emb)
                try:
                    await ctx.author.send(f"{ctx.prefix}edit {_id} {antiformat(text_input)}")
                except Exception:
                    pass
                try:
                    await ctx.message.delete()
                except Exception:
                    pass


    @commands.cooldown(1, 120, commands.BucketType.member)
    @commands.check_any(
        commands.has_permissions(administrator=True),
        is_moderator() )
    @commands.command(
        aliases=["reaction-role", "rr", "reactionrole", "add-reaction-role"],
        description="–¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–æ–ª—å –∑–∞ —Ä–µ–∞–∫—Ü–∏—é –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        usage="–†–æ–ª—å",
        brief="Minecraft Player" )
    async def reaction_role(self, ctx, *, role: discord.Role):
        if role.position >= ctx.author.top_role.position  and ctx.author.id != ctx.guild.owner_id:
            reply = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description=f"–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å **<@&{role.id}>** –≤—ã—à–µ –í–∞—à–µ–π, –ø–æ—ç—Ç–æ–º—É –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –µ—ë –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
            await ctx.send(embed=reply)

        else:
            server_rr = ReactionRolesConfig(ctx.guild.id)

            reply = discord.Embed(
                title="üß∏ | –†–æ–ª—å –∑–∞ —Ä–µ–∞–∫—Ü–∏—é",
                description=(
                    f"–í—ã —É–∫–∞–∑–∞–ª–∏ **<@&{role.id}>** –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–æ–ª–∏ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é.\n"
                    "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥ –Ω—É–∂–Ω—ã–º –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å—Å—è —Ä–æ–ª—å."
                ),
                color=role.color
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

            # Waiting for moderator's reaction
            def check(payload):
                return payload.user_id == ctx.author.id and payload.guild_id == ctx.guild.id
            
            cycle = True
            _payload = None
            while cycle:
                try:
                    payload = await self.client.wait_for("raw_reaction_add", check=check, timeout=120)

                except asyncio.TimeoutError:
                    reply = discord.Embed(
                        title="üïë | –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
                        description="–í—ã –Ω–µ —Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é –±–æ–ª–µ–µ 120 —Å–µ–∫—É–Ω–¥",
                        color=discord.Color.blurple()
                    )
                    reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                    await ctx.send(ctx.author.mention, embed=reply)
                    cycle = False

                else:
                    if server_rr.get_role(payload.message_id, payload.emoji) is not None:
                        reply = discord.Embed(
                            title="‚ö† –û—à–∏–±–∫–∞",
                            description="–ó–∞ —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é —É–∂–µ –¥–∞—ë—Ç—Å—è —Ä–æ–ª—å",
                            color=discord.Color.gold()
                        )
                        reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                        await ctx.send(ctx.author.mention, embed=reply)

                    else:
                        channel = ctx.guild.get_channel(payload.channel_id)
                        message = await channel.fetch_message(payload.message_id)
                        try:
                            await message.add_reaction(payload.emoji)
                            await message.remove_reaction(payload.emoji, ctx.author)
                        except Exception:
                            pass
                        else:
                            cycle = False
                            _payload = payload
            
            # Adding emoji-role pair to database
            if _payload is not None:
                server_rr.add_role(_payload.message_id, _payload.emoji, role.id)

                reply = discord.Embed(
                    title="üß∏ | –†–æ–ª—å –∑–∞ —Ä–µ–∞–∫—Ü–∏—é",
                    description=f"–¢–µ–ø–µ—Ä—å –≤ –∫–∞–Ω–∞–ª–µ <#{_payload.channel_id}> –¥–∞—ë—Ç—Å—è —Ä–æ–ª—å **<@&{role.id}>** –∑–∞ —Ä–µ–∞–∫—Ü–∏—é [{_payload.emoji}] –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                    color=role.color
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
        
        # Resetting cooldownd
        raise CooldownResetSignal()


    @commands.cooldown(1, 120, commands.BucketType.member)
    @commands.check_any(
        commands.has_permissions(administrator=True),
        is_moderator() )
    @commands.command(
        aliases=["remove-reaction-role", "rrr", "removereactionrole", "reaction-role-remove"] )
    async def remove_reaction_role(self, ctx):
        server_rr = ReactionRolesConfig(ctx.guild.id)

        reply = discord.Embed(
            title="‚Ü© | –°–±—Ä–æ—Å —Ä–æ–ª–∏ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥ –Ω—É–∂–Ω—ã–º –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —É–±–µ—Ä–∏—Ç–µ (–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏ —É–±–µ—Ä–∏—Ç–µ) —Ä–µ–∞–∫—Ü–∏—é, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –¥–∞—ë—Ç—Å—è —Ä–æ–ª—å.",
            color=discord.Color.magenta()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)

        # Waiting for moderator's reaction
        def check(payload):
            return payload.user_id == ctx.author.id and payload.guild_id == ctx.guild.id
        
        cycle = True
        _payload = None
        role_id = None
        while cycle:
            try:
                payload = await self.client.wait_for("raw_reaction_remove", check=check, timeout=120)

            except asyncio.TimeoutError:
                reply = discord.Embed(
                    title="üïë | –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
                    description="–í—ã –Ω–µ —É–±–∏—Ä–∞–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –±–æ–ª–µ–µ 120 —Å–µ–∫—É–Ω–¥",
                    color=discord.Color.blurple()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(ctx.author.mention, embed=reply)
                cycle = False

            else:
                role_id = server_rr.get_role(payload.message_id, payload.emoji)
                if role_id is None:
                    reply = discord.Embed(
                        title="‚ö† –û—à–∏–±–∫–∞",
                        description="–ó–∞ —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é –Ω–µ –¥–∞—ë—Ç—Å—è —Ä–æ–ª—å",
                        color=discord.Color.gold()
                    )
                    reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                    await ctx.send(ctx.author.mention, embed=reply)

                else:
                    channel = ctx.guild.get_channel(payload.channel_id)
                    message = await channel.fetch_message(payload.message_id)
                    try:
                        await message.clear_reaction(payload.emoji)
                    except Exception:
                        pass
                    else:
                        cycle = False
                        _payload = payload
        
        # Adding emoji-role pair to database
        if _payload is not None:
            server_rr.remove_reaction(_payload.message_id, _payload.emoji)

            reply = discord.Embed(
                title="üéÄ | –°–±—Ä–æ—Å —Ä–æ–ª–∏ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é",
                description=f"–¢–µ–ø–µ—Ä—å, –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ä–æ–ª—å **<@&{role_id}>** –±–æ–ª—å—à–µ –Ω–µ –¥–∞—ë—Ç—Å—è –∑–∞ —Ä–µ–∞–∫—Ü–∏—é [{_payload.emoji}].",
                color=discord.Color.magenta()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        # Resetting cooldownd
        raise CooldownResetSignal()


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.check_any(
        commands.has_permissions(administrator=True),
        is_moderator() )
    @commands.command(aliases=["preview-welcome", "pw"])
    async def preview_welcome(self, ctx):
        wc = Welcome_card(ctx.author)
        
        collection = db["msg_manip"]
        result = collection.find_one(
            {"_id": ctx.author.guild.id},
            projection={"welcome_message": True}
        )
        if result is None:
            result = {}
        message = result.get("welcome_message")
        message = message.replace("{member_count}", str(wc.count))
        message = message.replace("{user}", antiformat(wc.name))
        message = message.replace("{server}", str(ctx.author.guild.name))

        wemb = discord.Embed(
            description=message,
            color=ctx.guild.me.color
        )
        wemb.set_image(url=f"attachment://welcome.png")
        await ctx.send(str(ctx.author.mention), embed=wemb, file=discord.File(wc.generate(), "welcome.png"))


    
def setup(client):
    client.add_cog(utilities(client))