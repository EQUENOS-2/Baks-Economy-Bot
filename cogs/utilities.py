import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio, os
import requests

import pymongo
from box.db_worker import cluster

#========== Variables ==========
db = cluster["guilds"]

mass_dm_errors = {}

#========== Functions ==========
from functions import has_permissions, detect, has_any_role, quote_list

def unwrap_isolation(text, s):
    length, wid, i = len(text), len(s), 0
    out = ""
    while i < length:
        if text[i:i + wid] == s:
            i += wid
            while i < length and text[i:i + wid] != s:
                out += text[i]
                i += 1
            out += "\n"
        i += 1
    return out.strip()

def color_from_string(_color):
    Col = discord.Color
    _color = _color.lower()
    if "," in _color:
        rgb = [c.strip() for c in _color.split(",")]
        rgb = [int(c) for c in rgb]
        if len(rgb) < 3 or len(rgb) > 3:
            _color = Col.default()
        else:
            in_range_bools = [(c >= 0 and c < 256) for c in rgb]
            if False in in_range_bools:
                _color = Col.default()
            else:
                _color = Col.from_rgb(*rgb)
    else:
        colors = {
            "green": Col.green(), "dark_green": Col.dark_green(),
            "red": Col.red(), "dark_red": Col.dark_red(),
            "blue": Col.default(), "dark_blue": Col.dark_blue(),
            "magenta": Col.magenta(), "teal": Col.teal(),
            "gold": Col.gold(), "orange": Col.orange(),
            "purple": Col.purple(), "blurple": Col.blurple(),
            "white": Col.from_rgb(255, 255, 255), "black": Col.from_rgb(1, 1, 1)
        }
        if _color not in colors:
            _color = Col.default()
        else:
            _color = colors[_color]
    return _color

def antiformat(text):
    alph = "qwertyuiopasdfghjklzxcvbnm1234567890 \n"
    out = ""
    for s in text:
        if s.lower() not in alph:
            out += "\\" + s
        else:
            out += s
    return out

def embed_from_string(text_input):
    # Carving logical parts
    _title = unwrap_isolation(text_input, "==")
    _desc = unwrap_isolation(text_input, "--")
    _color = unwrap_isolation(text_input, "##")
    _image_url = unwrap_isolation(text_input, "&&")
    _thumb_url = unwrap_isolation(text_input, "++")
    # Interpreting some values
    _color = color_from_string(_color)

    emb = discord.Embed(
        title=_title,
        description=_desc,
        color=_color
    )
    if _image_url != "":
        emb.set_image(url=_image_url)
    if _thumb_url != "":
        emb.set_thumbnail(url=_thumb_url)
    
    return emb

async def get_message(channel, msg_id):
    try:
        return await channel.fetch_message(msg_id)
    except Exception:
        return None

async def try_send_and_count(channel_or_user, message_id, content=None, embed=None, files=None):
    try:
        await channel_or_user.send(content=content, embed=embed, files=files)
    except Exception:
        global mass_dm_errors
        if message_id not in mass_dm_errors:
            mass_dm_errors[message_id] = 1
        else:
            mass_dm_errors[message_id] += 1


class utilities(commands.Cog):
    def __init__(self, client):
        self.client = client

    #========== Events ===========
    @commands.Cog.listener()
    async def on_ready(self):
        print(">> Utilities cog is loaded")

    #========= Commands ==========
    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(aliases=["dm-role", "mass-send", "role-dm", "dr"])
    async def dm_role(self, ctx, role_search, *, text):
        req_roles = [688313470881759288]
        if not has_any_role(ctx.author, req_roles):
            reply = discord.Embed(
                title="‚ùå –ù–µ—Ç –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏",
                description=f"**–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:**\n{quote_list([f'<@&{_id}>' for _id in req_roles])}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            role = detect.role(ctx.guild, role_search)
            if role is None:
                reply = discord.Embed(
                    title="üí• –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å",
                    description="–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)

            else:
                atts = ctx.message.attachments

                paper = f"üì¢ **{ctx.guild.name}**\n\n{text}"[:2000]
                files = []
                
                for att in atts:
                    files.append(await att.to_file())

                total_targets = 0
                await ctx.send("üïë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                for member in ctx.guild.members:
                    if role in member.roles:
                        total_targets += 1
                        self.client.loop.create_task(try_send_and_count(member, ctx.message.id, paper, files=files))
                
                await ctx.send("üïë –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...")

                global mass_dm_errors
                error_targets = mass_dm_errors.get(ctx.message.id, 0)
                if ctx.message.id in mass_dm_errors:
                    mass_dm_errors.pop(ctx.message.id)

                reply = discord.Embed(
                    title="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    description=(
                        f"**–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:** –æ–±–ª–∞–¥–∞—Ç–µ–ª–∏ —Ä–æ–ª–∏ <@&{role.id}>\n"
                        f"**–í—Å–µ–≥–æ:** {total_targets}\n"
                        f"**–ü–æ–ª—É—á–∏–ª–∏:** {total_targets - error_targets}\n"
                    ),
                    color=discord.Color.dark_green()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)

    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command()
    async def embed(self, ctx, *, text_input):
        req_roles = [688313470881759288]
        if not has_any_role(ctx.author, req_roles):
            reply = discord.Embed(
                title="‚ùå –ù–µ—Ç –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏",
                description=f"**–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:**\n{quote_list([f'<@&{_id}>' for _id in req_roles])}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            emb = embed_from_string(text_input)
            
            await ctx.send(embed=emb)
            try:
                await ctx.author.send(f"{ctx.prefix}embed {antiformat(text_input)}")
            except Exception:
                pass
            try:
                await ctx.message.delete()
            except Exception:
                pass

    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command()
    async def edit(self, ctx, _id, *, text_input):
        req_roles = [688313470881759288]
        if not has_any_role(ctx.author, req_roles):
            reply = discord.Embed(
                title="‚ùå –ù–µ—Ç –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏",
                description=f"**–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:**\n{quote_list([f'<@&{_id}>' for _id in req_roles])}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            if not _id.isdigit():
                reply = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"ID –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä.\n–í–≤–µ–¥–µ–Ω–æ: {_id}",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                await ctx.send(embed=reply)
            
            else:
                message = await get_message(ctx.channel, int(_id))
                if message is None:
                    reply = discord.Embed(
                        title="üîé –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        description=f"–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: `{_id}`"
                    )
                    reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                    await ctx.send(embed=reply)
                
                elif message.author.id != self.client.user.id:
                    reply = discord.Embed(
                        title="‚ùå –≠—Ç–æ –Ω–µ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        description="–Ø –Ω–µ –∏–º–µ—é –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                        color=discord.Color.dark_red()
                    )
                    reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                    await ctx.send(embed=reply)
                
                else:
                    emb = embed_from_string(text_input)
                    
                    await message.edit(embed=emb)
                    try:
                        await ctx.author.send(f"{ctx.prefix}edit {_id} {antiformat(text_input)}")
                    except Exception:
                        pass
                    try:
                        await ctx.message.delete()
                    except Exception:
                        pass

    #======== Errors ===========
    @dm_role.error
    async def dm_role_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            p = ctx.prefix
            cmd = ctx.command.name
            reply = discord.Embed(
                title = f"‚ùì –û–± –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö `{p}{cmd}`",
                description = (
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏\n"
                    f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `{p}{cmd} @–†–æ–ª—å –¢–µ–∫—Å—Ç`\n"
                    f"**–ü—Ä–∏–º–µ—Ä:** `{p}{cmd} @Member –í—ã–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª`\n"
                )
            )
            reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
            await ctx.send(embed = reply)

    @embed.error
    async def embed_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            p = ctx.prefix
            cmd = ctx.command.name
            reply = discord.Embed(
                title = f"‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è `{p}{cmd}`",
                description = (
                    "**–û–ø–∏—Å–∞–Ω–∏–µ:** —Å–æ–∑–¥–∞—ë—Ç —Ä–∞–º–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Ç–µ–∫—Å—Ç–æ–º, –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç.–ø.\n"
                    "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–∞–º–∫–∏:\n"
                    "> `==–ó–∞–≥–æ–ª–æ–≤–æ–∫==` - –∑–∞–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫\n"
                    "> `--–¢–µ–∫—Å—Ç--` - –∑–∞–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫\n"
                    "> `##—Ü–≤–µ—Ç##` - –∑–∞–¥–∞—ë—Ç —Ü–≤–µ—Ç (—Å–º. –Ω–∏–∂–µ)\n"
                    "> `&&url_–∫–∞—Ä—Ç–∏–Ω–∫–∏&&` - –∑–∞–¥–∞—ë—Ç –±–æ–ª—å—à—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
                    "> `++url_–∫–∞—Ä—Ç–∏–Ω–∫–∏++` - –∑–∞–¥–∞—ë—Ç –º–∞–ª–µ–Ω—å–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
                    "**–û —Ü–≤–µ—Ç–µ:** —Ü–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ RGB\n"
                    "–í RGB —Ñ–æ—Ä–º–∞—Ç–µ –º–µ–∂–¥—É `##` –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä `##23, 123, 123##`\n"
                    "–°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤: `red, dark_red, blue, dark_blue, green, dark_green, gold, teal, magenta, purple, blurple, orange, white, black`\n"
                    "**–ü—Ä–∏–º–µ—Ä**\n"
                    f"```{p}{cmd} ==–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ==\n"
                    "--–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª—å **–ü–æ–º–æ—â–Ω–∏–∫**!--\n"
                    "##gold##```"
                ),
                color=discord.Color.from_rgb(0, 57, 84)
            )
            reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
            await ctx.send(embed = reply)

    @edit.error
    async def edit_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            p = ctx.prefix
            cmd = ctx.command.name
            reply = discord.Embed(
                title = f"‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è `{p}{cmd}`",
                description = (
                    "**–û–ø–∏—Å–∞–Ω–∏–µ:** —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–∏ —Ä–∞–º–∫–∏ (—ç–º–±–µ–¥—ã)\n"
                    f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `{p}{cmd} ID_—Å–æ–æ–±—â–µ–Ω–∏—è –¢–µ–∫—Å—Ç_–¥–ª—è_—ç–º–±–µ–¥–∞`\n"
                    f"**–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–µ–∫—Å—Ç–µ –¥–ª—è —ç–º–±–µ–¥–∞:** `{p}embed`"
                ),
                color=discord.Color.from_rgb(0, 57, 84)
            )
            reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
            await ctx.send(embed = reply)

def setup(client):
    client.add_cog(utilities(client))