import discord
from discord.ext import commands
from discord.ext.commands import Bot
import failures
import asyncio, os, datetime, json

from functions import detect, get_field, try_int, has_permissions, ServerConfig, is_moderator

from pymongo import MongoClient
app_string = str(os.environ.get('cluster_string'))
cluster = MongoClient(app_string)
db = cluster["guilds"]

trigger_file = "msg_triggers.json"
mod_role_limit = 10

def delete(filename):
    if filename in os.listdir("."):
        os.remove(filename)

def load(filename, default=None):
    if filename in os.listdir("."):
        with open(filename, "r", encoding="utf8") as fff:
            default = json.load(fff)
    return default

def save(data, filename):
    with open(filename, "w", encoding="utf8") as fff:
        json.dump(data, fff)

#============= Cog itself ================

class settings(commands.Cog):
    def __init__(self, client):
        self.client = client

    #========== Events ===========
    @commands.Cog.listener()
    async def on_ready(self):
        delete(trigger_file)
        print(">> Settings cog is loaded")
    
    # On message
    @commands.Cog.listener()
    async def on_message(self, message):
        trig_data = load(trigger_file, {})
        if message.guild is not None:
            guild_id = message.guild.id
            
            if f"{guild_id}" not in trig_data:
                collection = db["msg_manip"]
                result = collection.find_one(
                    {"_id": guild_id}
                )
                trig = get_field(result, "trigger")
                rep = get_field(result, "reply")
                trig_data.update([(f"{guild_id}", {"trigger": trig, "reply": rep})])

                save(trig_data, trigger_file)
            else:
                trig = trig_data[f"{guild_id}"]["trigger"]
                rep = trig_data[f"{guild_id}"]["reply"]
            
            text = message.content.lower()
            if trig is not None and rep is not None and trig in text:
                reply = discord.Embed(
                    description=rep,
                    color=message.author.color
                )
                await message.channel.send(embed=reply)

    #========= Commands ===========
    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.command(aliases=["set", "how-set", "hs"])
    async def how_set(self, ctx):
        server = ServerConfig(ctx.guild.id)

        mr_desc = ""
        for mr in server.mod_roles:
            mr_desc += f"> **<@&{mr}>**\n"
        if mr_desc == "":
            mr_desc = "> –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        if server.log_channel is not None:
            log_desc = f"> <#{server.log_channel}>"
        else:
            log_desc = "> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        reply = discord.Embed(
            title=":gear: | –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            color=ctx.guild.me.color
        )
        reply.add_field(name="üõ† –†–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", value=mr_desc)
        reply.add_field(name="üìã –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤", value=log_desc)
        reply.set_thumbnail(url=f"{ctx.guild.icon_url}")
        await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        aliases=["add-mod-role", "add-moderator-role", "amr"],
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        usage="–†–æ–ª—å",
        brief="@Moderator" )
    async def add_mod_role(self, ctx, role: discord.Role):
        server = ServerConfig(ctx.guild.id, {"mod_roles": True})
        server.clear_outdated_roles(ctx.guild.roles)
        if len(server.mod_roles) >= mod_role_limit:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description=(
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {mod_role_limit}\n"
                    f"–£–±—Ä–∞—Ç—å –ª–∏—à–Ω—é—é: `{ctx.prefix}remove-mod-role`"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            server.add_mod_role(role.id)
            reply = discord.Embed(
                title="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                description=f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: **<@&{role.id}>**",
                color=discord.Color.dark_green()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
    

    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        aliases=["remove-mod-role", "remove-moderator-role", "rmr"],
        description="—É–±–∏—Ä–∞–µ—Ç —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞",
        usage="–†–æ–ª—å",
        brief="@Moderator" )
    async def remove_mod_role(self, ctx, role: discord.Role):
        server = ServerConfig(ctx.guild.id, {"mod_roles": True})

        if role.id not in server.mod_roles:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description=f"–†–æ–ª—å **<@&{role.id}>** –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–π.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            server.remove_mod_role(role.id)
            reply = discord.Embed(
                title="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                description=f"–£–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: **<@&{role.id}>**",
                color=discord.Color.dark_green()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["set-currency", "set-cur", "setcur"],
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–ª—é—Ç—ã",
        usage="–ó–Ω–∞—á–æ–∫",
        brief="‚ú®" )
    async def set_currency(self, ctx, string):
        p = ctx.prefix
        string = string[:+52]
        collection = db["items"]
        collection.find_one_and_update(
            {"_id": ctx.guild.id},
            {"$set": {"cy": string}},
            upsert=True
        )
        reply = discord.Embed(
            title="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=(
                f"–ù–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ –≤–∞–ª—é—Ç—ã: {string}\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: `{p}how-set`"
            ),
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)
    

    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["work-range"],
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–æ–º–∞–Ω–¥—ã `work`",
        usage="–ú–∏–Ω.–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ú–∞–∫—Å.–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
        brief="300 700" )
    async def work_range(self, ctx, lower_bound, upper_bound):
        p = ctx.prefix
        if not lower_bound.isdigit() or not upper_bound.isdigit():
            reply = discord.Embed(
                title="üí¢ –û—à–∏–±–∫–∞",
                description=(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.\n"
                    f"–ü—Ä–∏–º–µ—Ä: `{p}work-range 200 500`"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        
        elif int(lower_bound) >= int(upper_bound):
            reply = discord.Embed(
                title="üí¢ –û—à–∏–±–∫–∞",
                description=(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.\n"
                    f"–ü—Ä–∏–º–µ—Ä: `{p}work-range 200 500`"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)

        else:
            lower_bound, upper_bound = int(lower_bound), int(upper_bound)
            collection = db["money"]
            result = collection.find_one_and_update(
                {"_id": ctx.guild.id},
                {"$set": {"work_range": (lower_bound, upper_bound)}},
                upsert=True,
                projection={"cur": True}
            )
            cur = get_field(result, "cur")
            if cur is None:
                cur = "üí∞"
            
            reply = discord.Embed(
                title=f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ",
                description=(
                    f"–¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ `{p}work` –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—Ç **{lower_bound}** –¥–æ **{upper_bound}** {cur}\n\n"
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: `{p}how-set`"
                ),
                color=discord.Color.dark_green()
            )
            await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["trig", "t"],
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä, –ø—Ä–æ–≤–æ—Ü–∏—Ä—É—é—â–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞",
        usage="—Ç–µ–∫—Å—Ç\ndelete",
        brief="–ø—Ä–∏–≤–µ—Ç" )
    async def trigger(self, ctx, *, string):
        p = ctx.prefix
        if string.lower() == "delete":
            desc = "–¢—Ä–∏–≥–≥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª—ë–Ω"
            string = None
        else:
            string = string[:+500].lower()
            desc = f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å \"{string}\""

        collection = db["msg_manip"]
        collection.find_one_and_update(
            {"_id": ctx.guild.id},
            {"$set": {"trigger": string}},
            upsert=True
        )
        data = load(trigger_file, {})
        if f"{ctx.guild.id}" in data:
            data[f"{ctx.guild.id}"]["trigger"] = string
            save(data, trigger_file)

        reply = discord.Embed(
            title="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=(
                f"{desc}\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: `{p}how-set`"
            ),
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["trigger-reply", "trig-reply", "tr"],
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –∫–æ–º–∞–Ω–¥–µ `trigger`)",
        usage="—Ç–µ–∫—Å—Ç\ndelete",
        brief="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π" )
    async def trigger_reply(self, ctx, *, text):
        p = ctx.prefix
        if text.lower() == "delete":
            desc = "–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º —É–¥–∞–ª—ë–Ω."
            text = None
        else:
            text = text[:+500]
            desc = f"–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º:\n{text}"

        collection = db["msg_manip"]
        collection.find_one_and_update(
            {"_id": ctx.guild.id},
            {"$set": {"reply": text}},
            upsert=True
        )
        data = load(trigger_file, {})
        if f"{ctx.guild.id}" in data:
            data[f"{ctx.guild.id}"]["reply"] = text
            save(data, trigger_file)

        reply = discord.Embed(
            title="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=(
                f"{desc}\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: `{p}how-set`"
            ),
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)

    # +---------------------------------------+
    # |            Group: welcome             |
    # +---------------------------------------+
    @commands.check_any(
        commands.has_permissions(administrator=True),
        is_moderator() )
    @commands.group()
    async def welcome(self, ctx):
        p = ctx.prefix
        if ctx.invoked_subcommand is None:
            reply = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=(
                    "–£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏—Ö —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
                    f"> `{p}{ctx.command} channel`\n"
                    f"> `{p}{ctx.command} message`\n"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
    
    @welcome.command(
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π",
        usage="channel #–∫–∞–Ω–∞–ª" )
    async def channel(self, ctx, *, channel: discord.TextChannel):
        collection = db["msg_manip"]
        collection.update_one(
            {"_id": ctx.guild.id},
            {"$set": {"welcome_channel": channel.id}},
            upsert=True
        )
        reply = discord.Embed(
            title="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"–¢–µ–ø–µ—Ä—å <#{channel.id}> - –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π.",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    

    @welcome.command(
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        usage="message –¢–µ–∫—Å—Ç",
        brief=(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server}\n"
            "–ü—Ä–∏–≤–µ—Ç, {user}\n"
            "–¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {member_count}!"
        ) )
    async def message(self, ctx, *, text):
        collection = db["msg_manip"]
        collection.update_one(
            {"_id": ctx.guild.id},
            {"$set": {"welcome_message": text}},
            upsert=True
        )
        reply = discord.Embed(
            title="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"**–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n{text}",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)

    # +---------------------------------------+
    # |                Errors                 |
    # +---------------------------------------+

def setup(client):
    client.add_cog(settings(client))