import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio
import brawlstats
import os
from random import choice

#----------------------------------------------+
#       Connecting to Brawl Stars API          |
#----------------------------------------------+
brawl_token = str(os.environ.get("brawl_token"))
brawl = None
try:
    print("--> Connecting to BrawlStars API...")
    brawl = brawlstats.Client(brawl_token, is_async=True)
except Exception as e:
    print(f"--> Failed to connect: {e}")

#----------------------------------------------+
#                 Constants                    |
#----------------------------------------------+
from functions import bscolors, owner_ids, max_club_roles
from failures import CooldownResetSignal
from custom_emojis import *
emj = Emj()

#----------------------------------------------+
#                 Functions                    |
#----------------------------------------------+
from functions import timeout_embed, BrawlDiscordList, BrawlDiscordUser, antiformat as anf, is_moderator, ServerConfig, BrawlClubLoop


async def better_add_role(member, role):
    if isinstance(role, int):
        role = member.guild.get_role(role)
    if role is not None and role not in member.roles:
        try:
            await member.add_roles(role)
        except Exception:
            pass


class FakeBrawlProfile:
    def __init__(self):
        self.tag = "#EQUENOS"
        self.name = "EQUENOS"
        self.name_color = "#ffdead"
        self.trophies = 46756
        self.highest_trophies = 46756
        self.power_play_points = 1337
        self.highest_power_play_points = 1337
        self.exp_level = 347
        self.exp_points = 8976548
        self.is_qualified_from_championship_challenge = True
        self.x3vs3_victories = 20235
        self.team_victories = self.x3vs3_victories
        self.solo_victories = 30532
        self.duo_victories = 19321
        self.best_robo_rumble_time = 25
        self.best_time_as_big_brawler = 25
        self.club = FakeBrawlClub()
        self.brawlers = []


class FakeBrawlClub:
    def __init__(self):
        self.name = "Procrastination"
        self.tag = "#DISCORD"
    
    def __len__(self):
        return 2


class brawlactions(commands.Cog):
    def __init__(self, client):
        self.client = client

    #----------------------------------------------+
    #                   Events                     |
    #----------------------------------------------+
    @commands.Cog.listener()
    async def on_ready(self):
        print(f">> Brawl Actions cog is loaded")

        while True:
            print("--> Launching club check loop...")
            bloop = BrawlClubLoop(self.client.user.id)
            await asyncio.sleep(bloop.time_left.total_seconds())
            bloop.update_timestamp()
            for data in bloop.get_servers():
                server = self.client.get_guild(data.get("_id", 0))
                if server is not None:
                    club_roles = data.get("club_roles", {})
                    bdlist = BrawlDiscordList()
                    # Looking at each verified member
                    for bduser in bdlist.find_matches([m.id for m in server.members]):
                        # Checking if he has any club roles
                        member = server.get_member(bduser.id)
                        role_ids = [r.id for r in member.roles]
                        his_club_roles = {}
                        for club_tag in club_roles:
                            role_id = club_roles[club_tag]
                            if role_id in role_ids:
                                his_club_roles[club_tag] = role_id
                        if len(his_club_roles) > 0:
                            # Getting player's current club
                            club_tag = None
                            try:
                                player = await brawl.get_player(bduser.tag)
                            except Exception:
                                pass
                            else:
                                if len(player.club) >= 2:
                                    club_tag = player.club.tag
                            # Looking for incorrect roles
                            wrong_roles = []
                            for ct in his_club_roles:
                                if club_tag != ct:
                                    wrong_roles.append(server.get_role(his_club_roles[ct]))
                            try:
                                await member.remove_roles(*wrong_roles)
                            except Exception:
                                pass
    
    
    @commands.Cog.listener()
    async def on_message(self, message):
        if "#magic" in message.content.lower():
            await message.add_reaction(emj.mage_yes)
            await message.add_reaction(emj.mage_no)
    #----------------------------------------------+
    #                  Commands                    |
    #----------------------------------------------+
    @commands.command()
    async def ip(self, ctx):
        if ctx.author.id in owner_ids:
            try:
                brawlstats.Client(brawl_token)
            except Exception as e:
                await ctx.send(str(e))


    @commands.cooldown(1, 2, commands.BucketType.user)
    @commands.command(aliases=["brawl-config", "bconfig"])
    async def brawl_config(self, ctx):
        server = ServerConfig(ctx.guild.id, projection={"verified_role": True, "club_roles": True, "vote_channel": True})

        crdesc = ""
        for club_tag in server.club_roles:
            crdesc += f"> **{club_tag}:** <@&{server.club_roles[club_tag]}>\n"
        if crdesc == "":
            crdesc = "> –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        if server.verified_role is None:
            vrdesc = "> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            vrdesc = f"> <@&{server.verified_role}>"
        
        # if server.vote_channel is None:
        #     vcdesc = "> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        # else:
        #     vcdesc = f"> <#{server.vote_channel}>"
        
        reply = discord.Embed(
            title=":gear: | –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            color=ctx.guild.me.color
        )
        reply.add_field(name="‚≠ê –†–æ–ª—å –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", value=vrdesc, inline=False)
        reply.add_field(name="üî∞ –†–æ–ª–∏ –∫–ª—É–±–æ–≤", value=crdesc, inline=False)
        #reply.add_field(name="#Ô∏è‚É£ –ö–∞–Ω–∞–ª –∑–∞—è–≤–æ–∫ –≤ –∫–ª—É–±", value=vcdesc, inline=False)
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        reply.set_thumbnail(url=ctx.guild.icon_url)
        await ctx.send(embed=reply)


    @commands.cooldown(1, 360, commands.BucketType.user)
    @commands.command()
    async def verify(self, ctx):
        bdlist = BrawlDiscordList()
        bduser = BrawlDiscordUser(ctx.author.id)
        # If user is already verified
        if bduser.tag is not None:
            # Getting server verified-role and club roles
            server = ServerConfig(ctx.guild.id, {"verified_role": True, "club_roles": True})
            svr = server.verified_role
            if svr is not None:
                svr = ctx.guild.get_role(svr)
            try:
                player = await brawl.get_player(bduser.tag)
            except Exception:
                club = {}
            else:
                club = player.club
            club_role = None
            if len(club) >= 2:
                club_role = server.club_roles.get(club.tag)
                if club_role is not None:
                    club_role = ctx.guild.get_role(club_role)
            # End of relevant roles search
            # Checking if the roles exist and are added to the member
            got_roles = False
            if svr is not None or club_role is not None:
                desc = ""
                if svr is not None and svr not in ctx.author.roles:
                    await better_add_role(ctx.author, svr)
                    desc += f"–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å <@&{svr.id}>\n"
                if club_role is not None and club_role not in ctx.author.roles:
                    await better_add_role(ctx.author, club_role)
                    desc += f"–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å <@&{club_role.id}>, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞ **{club.name}**\n"
                
                if desc != "":
                    got_roles = True
                    reply2 = discord.Embed(
                        title="‚úÖ | –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫—É",
                        description=desc,
                        color=discord.Color.dark_green()
                    )
                    reply2.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                    await ctx.send(embed=reply2)
            
            if not got_roles:
                reply2 = discord.Embed(
                    title="‚ùå | –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫—É",
                    description="–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å Discord –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É Brawl Stars.",
                    color=discord.Color.dark_red()
                )
                reply2.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply2)

                raise CooldownResetSignal()
        
        else:
            # Introduction
            reply = discord.Embed(
                title="üîó | –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Brawl Stars",
                description=(
                    "–°–µ–π—á–∞—Å —è –ø–æ–ø—Ä–æ—à—É –í–∞—Å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–≥ –≤ Brawl Stars, –ø–æ—Å–ª–µ —á–µ–≥–æ —É –í–∞—Å –±—É–¥–µ—Ç —Ä–æ–≤–Ω–æ 3 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –Ω–∏–∫–∞ –≤ –∏–≥—Ä–µ.\n"
                    "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –∏–º–µ–Ω–Ω–æ –í—ã.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –≤ –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å. –ü—Ä–∏–º–µ—Ä - `#ABCDEFGH`\n"
                    "*–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ `cancel`*"
                ),
                color=discord.Color.orange()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

            # Waiting for a valid brawl tag
            cycle = True
            player = None
            while cycle:
                try:
                    msg = await self.client.wait_for(
                        "message",
                        check=lambda m: m.author.id == ctx.author.id and m.channel.id == ctx.channel.id and len(m.content) >= 3,
                        timeout=180
                    )
                except asyncio.TimeoutError:
                    await ctx.send(embed=timeout_embed(180, ctx.author))
                    cycle = False
                else:
                    if msg.content.lower() in ["quit", "cancel", "–æ—Ç–º–µ–Ω–∞"]:
                        reply2 = discord.Embed(
                            title="‚Ü© | –û—Ç–º–µ–Ω–∞",
                            description="–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                            color=discord.Color.blurple()
                        )
                        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                        await ctx.send(embed=reply2)
                        cycle = False
                    
                    else:
                        try:
                            player = await brawl.get_player(msg.content)
                        except Exception:
                            pass
                        else:
                            if bdlist.contains_tag(player.tag):
                                reply2 = discord.Embed(
                                    title="‚ùå | –û—à–∏–±–∫–∞",
                                    description=f"–ê–∫–∫–∞—É–Ω—Ç **{player.name}** —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Discord-–∞–∫–∫–∞—É–Ω—Ç—É.",
                                    color=discord.Color.dark_red()
                                )
                                reply2.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                                await ctx.send(embed=reply2)
                            
                            else:
                                cycle = False
            
            # Waiting for a color change
            if player is None:
                raise CooldownResetSignal()

            else:
                col = player.name_color
                req_col = choice([c for c in bscolors if c != col])
                rcnum = list(bscolors.keys()).index(req_col) + 1
                if req_col[4:] == "ffffff":
                    emb_col = discord.Color.from_rgb(254, 254, 254)
                else:
                    emb_col = int(req_col[4:], 16)
                
                reply = discord.Embed(
                    title="üîó | –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Brawl Stars",
                    description=(
                        f"–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç **{player.name}**. –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –í–∞–º, —Å–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ.\n"
                        f"–£ –í–∞—Å –µ—Å—Ç—å 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Å–≤–æ–µ–≥–æ –Ω–∏–∫–∞ –Ω–∞ **{bscolors[req_col]} ({rcnum}-–π –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä—ã, –¥–∞–∂–µ —Å Brawl Pass)**\n\n"
                        "–î–ª—è –í–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–≤–∞ –ø–æ–¥–∫—Ä–∞—à–µ–Ω–æ –Ω—É–∂–Ω—ã–º —Ü–≤–µ—Ç–æ–º.\n\n"
                        "–ß–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã —è —Å–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–∂–Ω–∏–π —Ü–≤–µ—Ç –Ω–∏–∫–∞ –≤ –∏–≥—Ä–µ."
                    ),
                    color = emb_col
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
            
                await asyncio.sleep(180)    # Should be 300?

                player = await brawl.get_player(player.tag)
                new_col = player.name_color
                if new_col != req_col:
                    reply = discord.Embed(
                        title="‚ùå | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞",
                        description=(
                            f"–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ **{player.name}** —Å—Ç–æ–∏—Ç –Ω–µ —Ç–æ—Ç —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω 3 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥ ({bscolors[req_col]}). "
                            "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
                        ),
                        color=discord.Color.dark_red()
                    )
                    reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                    await ctx.send(content=str(ctx.author.mention), embed=reply)
                
                else:
                    bdlist.link_together(ctx.author.id, player.tag)

                    reply = discord.Embed(
                        title="‚úÖ | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞",
                        description=(
                            f"–¢–µ–ø–µ—Ä—å –∞–∫–∫–∞—É–Ω—Ç Brawl Stars **{player.name}** –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –≤ Discord - **{ctx.author}**\n"
                            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: `{ctx.prefix}brawl-profile`"
                        ),
                        color=discord.Color.dark_green()
                    )
                    reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                    await ctx.send(content=str(ctx.author.mention), embed=reply)

                    server = ServerConfig(ctx.guild.id, {"verified_role": True, "club_roles": True})
                    await better_add_role(ctx.author, server.verified_role)
                    if len(player.club) >= 2:
                        club_role = server.club_roles.get(player.club.tag)
                        await better_add_role(ctx.author, club_role)


    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command()
    async def unverify(self, ctx):
        bdlist = BrawlDiscordList()
        if not bdlist.contains_id(ctx.author.id):
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description="–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å Discord –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Brawl Stars.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            reply = discord.Embed(
                title="‚ùì | –í—ã —É–≤–µ—Ä–µ–Ω—ã",
                description=(
                    "–ù–∞–ø–∏—à–∏—Ç–µ `–¥–∞`, —á—Ç–æ–±—ã –æ—Ç–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Brawl Stars\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ `–Ω–µ—Ç`, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ."
                )
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            botmsg = await ctx.send(embed=reply)

            yes = ["yes", "–¥–∞"]
            no = ["no", "–Ω–µ—Ç"]
            msg = None

            try:
                msg = await self.client.wait_for(
                    "message",
                    check=lambda m: m.author.id == ctx.author.id and m.channel.id == ctx.channel.id and m.content.lower() in [*yes, *no],
                    timeout=60
                )
            except asyncio.TimeoutError:
                await ctx.send(embed=timeout_embed(60, ctx.author))
            
            try:
                await botmsg.delete()
            except Exception:
                pass

            if msg is not None and msg.content.lower() in yes:
                bduser = BrawlDiscordUser(ctx.author.id)
                bduser.unlink()

                reply = discord.Embed(
                    title="‚úÖ | –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω",
                    description="–¢–µ–ø–µ—Ä—å –∫ –í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Discord –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ Brawl Stars-–∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                    color=discord.Color.dark_green()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(content=str(ctx.author.mention), embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(aliases=["brawl-profile", "bp"])
    async def brawl_profile(self, ctx, *, member: discord.Member=None):
        if member is None:
            member = ctx.author
            err_desc = f"–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å Discord –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Brawl Stars.\n–ü—Ä–∏–≤—è–∑–∞—Ç—å: `{ctx.prefix}verify`"
        else:
            err_desc = f"–ê–∫–∫–∞—É–Ω—Ç {member} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Brawl Stars."
        
        bduser = BrawlDiscordUser(member.id)
        if member.id in owner_ids:
            bduser.tag = "#EQUENOS"
        
        if bduser.tag is None:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description=err_desc,
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            async with ctx.channel.typing():
                if bduser.tag != "#EQUENOS":
                    player = await brawl.get_player(bduser.tag)
                else:
                    player = FakeBrawlProfile()
                
                reply = discord.Embed(
                    title=f"{emj.home} | –ü—Ä–æ—Ñ–∏–ª—å {anf(player.name)} `aka` {anf(member)}",
                    description=f"**Lvl:** {emj.xp} {player.exp_level} | **XP:** {player.exp_points}",
                    color=int("3476EF", 16)
                )
                reply.set_footer(text=" - Brawl Stars API")
                if len(player.club) >= 2:
                    reply.add_field(name="**–ö–ª—É–±**", value=f"{emj.club} **{anf(player.club.name)}** ({player.club.tag})", inline=False)
                reply.add_field(name="–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–æ—Ñ–µ–µ–≤", value=f"{emj.trophy} {player.highest_trophies}")
                reply.add_field(name="–ú–∞–∫—Å. –æ—á–∫–æ–≤ –≤ —Å–∏–ª–æ–≤–æ–π –≥–æ–Ω–∫–µ", value=f"{emj.maxrace} {player.highest_power_play_points}")
                # reply.add_field(name="–ú–∞–∫—Å. –ø–æ–±–µ–¥ –≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–∏", value=f"{emj.maxevent} --")
                reply.add_field(name="–ü–æ–±–µ–¥ 3 –Ω–∞ 3", value=f"{emj.trio} {player.x3vs3_victories}")
                reply.add_field(name="–û–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ–±–µ–¥", value=f"{emj.solo} {player.solo_victories}")
                reply.add_field(name="–ü–∞—Ä–Ω—ã—Ö –ø–æ–±–µ–¥", value=f"{emj.duo} {player.duo_victories}")
                reply.add_field(name="–£—Ä–æ–≤–µ–Ω—å —Ä–æ–±–æ—Ä—É–±–∫–∏", value=f"{emj.robolevel} {player.best_robo_rumble_time}")
                # reply.add_field(name="–£—Ä–æ–≤–µ–Ω—å –±–æ—è —Å –±–æ—Å—Å–æ–º", value=f"{emj.bosslevel} --")
                # reply.add_field(name="–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≥—Ä–æ–º–∞", value=f"{emj.destructlevel} --")

                await ctx.send(embed=reply)


    @commands.cooldown(1, 60, commands.BucketType.user)
    @commands.command(aliases=["brawl-top", "bt"])
    async def brawl_top(self, ctx):
        await ctx.send("üïë –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Å BS API...")
        bdl = BrawlDiscordList()
        players = []
        for bdu in bdl.find_matches([ m.id for m in ctx.guild.members ]):
            try:
                player = await brawl.get_player(bdu.tag)
            except Exception:
                player = None
            else:
                players.append((bdu.id, player.name, player.trophies))
        players.sort(reverse=True, key=lambda tri: tri[2])
        desc = ""
        for i, p in enumerate(players[:10]):
            dtag = ctx.guild.get_member(p[0])
            desc += f"**{i + 1}.** {anf(dtag)} ‚Ä¢ `{p[1]}` ‚Ä¢ **{p[2]}** {emj.trophy}\n"
        
        reply = discord.Embed(
            title=f"{emj.club} | –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
            description=desc,
            color=discord.Color.gold()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)


    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(
        aliases=["verify-role", "vr"],
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Brawl Stars",
        usage="@–†–æ–ª—å\ndelete (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É)",
        brief="@Verified\ndelete" )
    async def verify_role(self, ctx, *, param):
        if param.lower() == "delete":
            value = None
            desc = "—É–¥–∞–ª–µ–Ω–∞"
        else:
            value = await commands.RoleConverter().convert(ctx, param)
            value = value.id
            desc = f"–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ <@&{value}>"
        
        server = ServerConfig(ctx.guild.id, {"_id": True})
        server.set_verified_role(value)

        reply = discord.Embed(
            title="‚úÖ | –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"–†–æ–ª—å –∑–∞ —É—Å–ø–µ—à–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ Brawl Stars {desc}",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)


    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(
        aliases=["add-club-role", "addclubrole", "acr"],
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–ª—É–±–∞ Brawl Stars –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
        usage="#–¢–ï–ì_–ö–õ–£–ë–ê @–†–æ–ª—å",
        brief="#ABCDEFG @ProClan Members" )
    async def add_club_role(self, ctx, club_tag, *, role: discord.Role):
        server = ServerConfig(ctx.guild.id, projection={"club_roles": True})
        if len(server.club_roles) >= max_club_roles:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º—É–º —Ä–æ–ª–µ–π –∫–ª—É–±–æ–≤ - {max_club_roles}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        elif club_tag in server.club_roles:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description="–ó–∞ –∫–ª—É–± —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º —É–∂–µ –¥–∞—é—Ç—Å—è —Ä–æ–ª–∏",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            try:
                club = await brawl.get_club(club_tag)
            except Exception:
                reply = discord.Embed(
                    title="‚ùå | –û—à–∏–±–∫–∞",
                    description=f"–ü–æ —Ç–µ–≥—É **{club_tag}** –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—É–±–æ–≤",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
            else:
                server.add_club_role(role.id, club.tag)
                reply = discord.Embed(
                    title="üî∞ | –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ",
                    description=f"–¢–µ–ø–µ—Ä—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ –∫–ª–∞–Ω–∞ **{club.name}** –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å—Å—è —Ä–æ–ª—å **<@&{role.id}>**",
                    color=discord.Color.teal()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)


    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(
        aliases=["remove-club-role", "removeclubrole", "rcr"],
        description="—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞—ë—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–ª—É–±–∞ Brawl Stars –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
        usage="#–¢–ï–ì_–ö–õ–£–ë–ê",
        brief="#ABCDEFG" )
    async def remove_club_role(self, ctx, club_tag):
        server = ServerConfig(ctx.guild.id, projection={"club_roles": True})
        if club_tag not in server.club_roles:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description="–ó–∞ –∫–ª—É–± —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –¥–∞—é—Ç—Å—è —Ä–æ–ª–∏",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            role_id = server.club_roles.get(club_tag, 0)
            server.remove_club_role(club_tag)
            reply = discord.Embed(
                title="üî∞ | –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ",
                description=f"–¢–µ–ø–µ—Ä—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ –∫–ª–∞–Ω–∞ —Å —Ç–µ–≥–æ–º **{club_tag}** –Ω–µ –¥–∞—ë—Ç—Å—è —Ä–æ–ª—å **<@&{role_id}>**",
                color=discord.Color.teal()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
    

    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(
        aliases=["vote-channel"],
        description="",
        usage="#–∫–∞–Ω–∞–ª\ndelete (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É)",
        brief="#–∫–∞–Ω–∞–ª-–¥–ª—è-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π\ndelete" )
    async def vote_channel(self, ctx, *, param):
        if param.lower() == "delete":
            value = None
            desc = "—É–¥–∞–ª—ë–Ω"
        else:
            value = await commands.TextChannelConverter().convert(ctx, param)
            value = value.id
            desc = f"–Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ <#{value}>"
        
        server = ServerConfig(ctx.guild.id, {"_id": True})
        server.set_vote_channel(value)

        reply = discord.Embed(
            title="‚úÖ | –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"–ö–∞–Ω–∞–ª –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π {desc}",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)

    #----------------------------------------------+
    #                   Errors                     |
    #----------------------------------------------+


def setup(client):
    client.add_cog(brawlactions(client))