import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio, os, datetime

#----------------------------------------------+
#                 Constants                    |
#----------------------------------------------+
from functions import timeout_embed, CustomColor
from failures import CooldownResetSignal

colors = CustomColor()
inv_capacity = 100
item_limit = 500
case_limit = 50
mkkey_tout = 60
name_limit = 52
edit_item_params = {
    "name": {
        "desc": "–∏–∑–º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∞",
        "usage": "[–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ] –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        "example": "[–§—É—Ç–±–æ–ª–∫–∞] –†—É–±–∞—à–∫–∞"
    },
    "price": {
        "desc": "–∏–∑–º–µ–Ω—è–µ—Ç —Ü–µ–Ω—É —à–º–æ—Ç–∫–∏",
        "usage": "[–ù–∞–∑–≤–∞–Ω–∏–µ] –ß–∏—Å–ª–æ",
        "example": "[–§—É—Ç–±–æ–ª–∫–∞] 100"
    },
    "role": {
        "desc": "–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ä–æ–ª—å –∫ —à–º–æ—Ç–∫–µ (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å—Å—è —Ä–æ–ª—å)",
        "usage": "[–ù–∞–∑–≤–∞–Ω–∏–µ] –†–æ–ª—å",
        "example": "[–§—É—Ç–±–ª–æ–∫–∞] @–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
    },
    "icon": {
        "desc": "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É —à–º–æ—Ç–∫–∏",
        "usage": "[–ù–∞–∑–≤–∞–Ω–∏–µ] (–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ URL)",
        "example": "[–§—É—Ç–±–æ–ª–∫–∞] (–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ URL)"
    }
}

#----------------------------------------------+
#                 Functions                    |
#----------------------------------------------+
from functions import detect, get_field, try_int, is_moderator, find_alias, antiformat as anf, carve_cmd
from functions import CustomerList, Customer, ItemStorage, Item, Case


def isfloat(string: str):
    try:
        float(string)
    except Exception:
        return False
    else:
        return True


def unpack_args(string):
    if isinstance(string, str):
        if string[0] == "[":
            pair = string[1:].rsplit("]", maxsplit=1)
            if len(pair) < 2:
                pair = string.split(maxsplit=1)
        else:
            pair = string.split(maxsplit=1)
        if len(pair) < 2:
            return pair[0].strip(), None
        else:
            return pair[0].strip(), pair[1].strip()
    else:
        return None, None


def unpack_case_args(string):
    if string is None:
        return (None, None)
    else:
        pair = string.split(maxsplit=1)
        if len(pair) < 2:
            return (None, pair[0])
        else:
            pair[0].rstrip("%")
            if not isfloat(pair[0]):
                return (None, pair[1])
            elif float(pair[0]) <= 0:
                return (None, pair[1])
            else:
                return (float(pair[0]), pair[1])


def dupe_dump(array: list):
    out = {}
    for elem in array:
        if elem not in out:
            out[elem] = 1
        else:
            out[elem] += 1
    return out


def wordlike_rarities(percentages: list):
    words = []
    for p in percentages:
        if 0 < p <= 1:
            words.append("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π")
        elif 1 < p <=5:
            words.append("–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π")
        elif 5 < p <= 20:
            words.append("–≠–ø–∏—á–µ—Å–∫–∏–π")
        elif 20 < p <= 50:
            words.append("–†–µ–¥–∫–∏–π")
        else:
            words.append("–û–±—ã—á–Ω—ã–π")
    return words


async def better_add_role(member, role):
    if isinstance(role, int):
        role = member.guild.get_role(role)
    if role is not None and role not in member.roles:
        try:
            await member.add_roles(role)
        except Exception:
            pass


class economy(commands.Cog):
    def __init__(self, client):
        self.client = client

    #----------------------------------------------+
    #                Cog methods                   |
    #----------------------------------------------+
    async def ask_to_choose(self, ctx, _choice: list):
        """Returns chosen index or None"""
        interruption_keys = [ctx.command.name, *ctx.command.aliases]
        channel = ctx.channel; user = ctx.author; prefix = ctx.prefix
        del ctx
        tout = 60
        desc = ""
        for i, row in enumerate(_choice):
            desc += f"`{i + 1}.` {row}\n"
        emb = discord.Embed(
            title="üîé | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
            description=f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ **–Ω–æ–º–µ—Ä** –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ:\n\n{desc}"
        )
        emb.set_footer(text=f"{user}", icon_url=f"{user.avatar_url}")
        botmsg = await channel.send(embed=emb)

        def check(m):
            return ( carve_cmd(prefix, m.content) in interruption_keys or
            (m.author.id == user.id and m.channel.id == channel.id and m.content.isdigit() and 0 < int(m.content) <= len(_choice)) )

        try:
            msg = await self.client.wait_for("message", check=check, timeout=tout)
        except asyncio.TimeoutError:
            await channel.send(embed=timeout_embed(tout, user))
        else:
            try:
                await botmsg.delete()
            except Exception:
                pass
            if carve_cmd(prefix, msg.content) not in interruption_keys:
                return int(msg.content) - 1

    #----------------------------------------------+
    #                   Events                     |
    #----------------------------------------------+
    @commands.Cog.listener()
    async def on_ready(self):
        print(">> Economy cog is loaded")
    
    #----------------------------------------------+
    #                  Commands                    |
    #----------------------------------------------+
    # Item related commands
    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["create-item", "ci", "createitem"],
        description="—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —à–º–æ—Ç–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        usage="–¶–µ–Ω–∞ –ù–∞–∑–≤–∞–Ω–∏–µ",
        brief="100 –§—Ç—É–±–æ–ª–∫–∞" )
    async def create_item(self, ctx, price: int, *, name):
        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True})
        if len(server.items) >= item_limit:
            reply = discord.Embed(
                title="‚ùå | –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                description=f"–°–æ–∑–¥–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à–º–æ—Ç–æ–∫ - {item_limit}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif price < 0:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description=f"–¶–µ–Ω–∞ —à–º–æ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        else:
            server.create_item(ctx.message.id, name[:name_limit], price)
            desc = (
                f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é —à–º–æ—Ç–∫—É - **{name}**.\n"
                f"**–¶–µ–Ω–∞:** {price} {server.cy}\n"
                f"**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:** `{ctx.prefix}edit-item`"
            )
            if len(name) > name_limit:
                desc += f"\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–ª–æ {name_limit} —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ*"
            reply = discord.Embed(
                title="üì¶ | –ù–æ–≤–∞—è –≤–µ—â—å",
                description=desc,
                color=discord.Color.blue()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)

    
    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["edit-item", "ei", "edititem"],
        description="–∏–∑–º–µ–Ω—è–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à–º–æ—Ç–∫–∏. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n`name`, `price`, `role`, `icon`",
        usage="–ø–∞—Ä–∞–º–µ—Ç—Ä [–ù–∞–∑–≤–∞–Ω–∏–µ] –ù–æ–≤–æ–µ –∑–Ω–∞—á–Ω–∏–µ",
        brief=(
            "name [–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ] –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "price [–ù–∞–∑–≤–∞–Ω–∏–µ] –ù–æ–≤–∞—è —Ü–µ–Ω–∞\n"
            "role [–ù–∞–∑–≤–∞–Ω–∏–µ] –†–æ–ª—å\n"
            "icon [–ù–∞–∑–≤–∞–Ω–∏–µ] (–∫–∞—Ä—Ç–∏–Ω–∫–∞)") )
    async def edit_item(self, ctx, param, *, string=None):
        search, value = unpack_args(string)
        atts = ctx.message.attachments
        p = ctx.prefix; cmd = str(ctx.invoked_with)
        params = {
            "name": ["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
            "price": ["—Ü–µ–Ω–∞"],
            "role": ["—Ä–æ–ª—å"],
            "icon": ["image", "avatar", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"]
        }
        parameter = find_alias(params, param)
        if parameter is None:
            desc = ""
            for par in params:
                desc += f"> `{p}{cmd} {par}`\n"
            reply = discord.Embed(
                title="‚ùå | –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä",
                description=f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∞ '{param}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏:\n{desc}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)

        elif value is None and not (parameter == "icon" and atts != []):
            _help_ = edit_item_params[parameter]
            reply = discord.Embed(
                title=f"‚ùì | –û –ø–∞—Ä–∞–º–µ—Ç—Ä–µ `{p}{cmd} {parameter}`",
                description=(
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {_help_['desc']}\n"
                    f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `{p}{cmd} {parameter} {_help_['usage']}`\n"
                    f"**–ü—Ä–∏–º–µ—Ä:** `{p}{cmd} {parameter} {_help_['example']}`"
                )
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)

        else:
            server = ItemStorage(ctx.guild.id, projection={"items"})
            items = server.search_items(search)
            item = None
            if len(items) == 0:
                reply = discord.Embed(
                    title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)

            elif len(items) < 2:
                item = items[0]
            else:
                ind = await self.ask_to_choose(ctx, [it.name for it in items])
                if ind is not None:
                    item = items[ind]
            
            if item is not None:
                updated = True
                if parameter == "name":
                    item.set_name(value[:name_limit])
                    item.name = value[:name_limit]
                elif parameter == "price":
                    if not value.isdigit():
                        updated = False
                        reply = discord.Embed(
                            title="‚ùå | –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç",
                            description=f"–í–º–µ—Å—Ç–æ '{value}' –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
                            color=discord.Color.dark_red()
                        )
                        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                        await ctx.send(embed=reply)
                    else:
                        item.set_price(int(value))
                elif parameter == "role":
                    role = await commands.RoleConverter().convert(ctx, value)
                    item.set_role(role.id)
                elif parameter == "icon":
                    if atts != []:
                        value = atts[0].url
                    item.set_icon_url(value)
                
                if updated:
                    reply = discord.Embed(
                        title="üîÅ | –í–µ—â—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                        description=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: `{p}view-item {item.name}`",
                        color=discord.Color.blue()
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["delete-item", "deleteitem", "di"],
        description="—É–¥–∞–ª—è–µ—Ç —à–º–æ—Ç–∫—É",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏",
        brief="–§—É—Ç–±–æ–ª–∫–∞" )
    async def delete_item(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True})
        items = server.search_items(search)
        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Visualising item
        if item is not None:
            item.delete()
            reply = discord.Embed(
                title="üì¶ | –£–¥–∞–ª–µ–Ω–∞ –≤–µ—â—å",
                description=f"–®–º–æ—Ç–∫–∞ {item.name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞.",
                color=discord.Color.dark_blue()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["give-item", "giveitem", "gi"],
        description="–≤—ã–¥–∞—ë—Ç —à–º–æ—Ç–∫—É",
        usage="[–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏] @–ò–≥—Ä–æ–∫ (—Å–µ–±—è –º–æ–∂–Ω–æ –Ω–µ —Ç–µ–≥–∞—Ç—å)",
        brief="[–§—É—Ç–±–æ–ª–∫–∞] @Player#0000" )
    async def give_item(self, ctx, *, string):
        search, member_s = unpack_args(string)
        if member_s is None:
            member = ctx.author
        else:
            member = await commands.MemberConverter().convert(ctx, member_s)
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True})
        items = server.search_items(search)
        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Giving item
        if item is not None:
            customer = Customer(ctx.guild.id, member.id)
            if len(customer.raw_items) >= item_limit:
                reply = discord.Embed(
                    title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞",
                    description=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å **{member}** –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω - –≤ –Ω—ë–º **{item_limit}** —à–º–æ—Ç–æ–∫.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            else:
                customer.give_item(item)
                reply = discord.Embed(
                    title="üì¶ | –í—ã–¥–∞–Ω–∞ —à–º–æ—Ç–∫–∞",
                    description=f"–ò–≥—Ä–æ–∫ **{member}** –ø–æ–ª—É—á–∏–ª **{item.name}** —Å–µ–±–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.",
                    color=discord.Color.dark_blue()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["add-key", "ak", "addkey"],
        description="–¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —à–º–æ—Ç–∫–µ –∫–ª—é—á –æ—Ç –∫–µ–π—Å–∞",
        usage="[–®–º–æ—Ç–∫–∞] –ö–µ–π—Å",
        brief="[–§—É—Ç–±–æ–ª–∫–∞] –ö–µ–π—Å —Å –æ–¥–µ–∂–¥–æ–π" )
    async def add_key(self, ctx, *, string):
        # Searching item
        item_search, case_search = unpack_args(string)
        if case_search is None:
            raise commands.MissingRequiredArgument("case_name")

        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True, "cases": True})
        items = server.search_items(item_search)
        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{item_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Searching case
        if item is not None:
            cases = server.search_cases(case_search)
            case = None
            if len(cases) == 0:
                reply = discord.Embed(
                    title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ü–æ –ø–æ–∏—Å–∫—É '{case_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(cases) < 2:
                case = cases[0]
            else:
                ind = await self.ask_to_choose(ctx, [c.name for c in cases])
                if ind is not None:
                    case = cases[ind]
            
            if case is not None:
                item.bind_case(case.id)
                reply = discord.Embed(
                    title="üîë | –î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á",
                    description=f"–¢–µ–ø–µ—Ä—å {item.name} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–µ–π—Å {case.name}",
                    color=colors.cardboard
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
    
    
    @commands.cooldown(1, case_limit * mkkey_tout, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["remove-key", "remk", "removekey"],
        description="–¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —à–º–æ—Ç–∫–µ –∫–ª—é—á –æ—Ç –∫–µ–π—Å–∞",
        usage="[–®–º–æ—Ç–∫–∞] –ö–µ–π—Å",
        brief="[–§—É—Ç–±–æ–ª–∫–∞] –ö–µ–π—Å —Å –æ–¥–µ–∂–¥–æ–π" )
    async def remove_key(self, ctx, *, string):
        # Searching item
        item_search, case_search = unpack_args(string)
        if case_search is None:
            raise commands.MissingRequiredArgument("case_name")

        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True, "cases": True})
        items = server.search_items(item_search)
        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{item_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Searching case
        if item is not None:
            cases = server.search_cases(case_search)
            case = None
            if len(cases) == 0:
                reply = discord.Embed(
                    title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ü–æ –ø–æ–∏—Å–∫—É '{case_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(cases) < 2:
                case = cases[0]
            else:
                ind = await self.ask_to_choose(ctx, [c.name for c in cases])
                if ind is not None:
                    case = cases[ind]
            
            if case is not None:
                if case.id not in item.key_for:
                    reply = discord.Embed(
                        title="‚ùå | –¢–∞–∫–æ–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        description=f"{item.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –¥–ª—è {case.name}.",
                        color=discord.Color.dark_red()
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)
                else:
                    item.unbind_case(case.id)
                    reply = discord.Embed(
                        title="üîë | –£–±—Ä–∞–Ω –∫–ª—é—á",
                        description=f"–¢–µ–ø–µ—Ä—å {item.name} –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–µ–π—Å {case.name}",
                        color=colors.cardboard
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)
        
        raise CooldownResetSignal()

    
    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.command(
        aliases=["view-items", "all-items", "item-list"])
    async def items(self, ctx, page: int=1):
        interval = 10
        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True})
        total_items = len(server.items)
        total_pages = abs(total_items - 1) // interval + 1
        if page > total_pages or page < 1:
            reply = discord.Embed(
                title="‚ùå | –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            if total_items == 0:
                desc = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            else:
                cy = server.cy
                items = sorted(server.items, key=lambda item: item.price)
                del server
                lb = (page - 1) * interval
                ub = min(page * interval, total_items)

                desc = ""
                for i in range(lb, ub):
                    item = items[i]
                    desc += f"`{i + 1}.` **{item.name}** | {item.price} {cy}\n"
            reply = discord.Embed(
                title=f"üì¶ | –®–º–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
                description=desc,
                color=discord.Color.blue()
            )
            reply.set_footer(text=f"–°—Ç—Ä. {page} / {total_pages} | {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.command(
        aliases=["view-item", "viewitem", "vi", "item"],
        description="–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–º–æ—Ç–∫–µ",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏",
        brief="–§—É—Ç–±–æ–ª–∫–∞" )
    async def view_item(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True, "cases": True})
        items = server.search_items(search)
        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Visualising item
        if item is not None:
            reply = discord.Embed(
                title=f"üì¶ | {item.name}",
                color=discord.Color.blue()
            )

            if item.icon_url is not None:
                reply.set_thumbnail(url=item.icon_url)
            reply.add_field(name="–¶–µ–Ω–∞", value=f"> {item.price} {server.cy}", inline=False)
            if item.role is not None:
                reply.add_field(name="–†–æ–ª—å", value=f"> <@&{item.role}>", inline=False)
            if item.key_for != []:
                desc = ""
                for case in server.cases:
                    if case.id in item.key_for:
                        desc += f"> {case.name}\n"
                reply.add_field(name="–ö–ª—é—á–∏", value=desc, inline=False)
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")

            try:
                await ctx.send(embed=reply)
            except Exception:
                del reply.thumbnail
                await ctx.send(embed=reply)


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command(
        aliases=["sell-item", "sellitem", "sell"],
        description="–ø—Ä–æ–¥–∞—ë—Ç —à–º–æ—Ç–∫—É",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        brief="–§—É—Ç–±–æ–ª–∫–∞\n–§—Ç—É–±–æ–ª–∫–∞ 3\nall (–ø—Ä–æ–¥–∞—Ç—å –≤—Å—ë)" )
    async def sell_item(self, ctx, *, search):
        customer = Customer(ctx.guild.id, ctx.author.id)
        arsearch = search.rsplit(maxsplit=1)
        search2 = ""
        num = 1
        if len(arsearch) > 1 and arsearch[1].isdigit():
            search2 = search
            search = arsearch[0]; num = int(arsearch[1])
        items = customer.search_item(search)

        if search.lower() == "all" and items == []:
            cy = ItemStorage(ctx.guild.id, {"cy": True}).cy
            earning = customer.sell_all_items()
            reply = discord.Embed(
                title="üì¶ | –ü—Ä–æ–¥–∞–Ω—ã –≤—Å–µ —à–º–æ—Ç–∫–∏",
                description=f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤–µ—Å—å —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ —Å—É–º–º—É **{earning}** {cy}",
                color=discord.Color.dark_blue()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)

        else:
            item = None
            if len(items) == 0:
                reply = discord.Embed(
                    title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search}' –≤ –í–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(items) < 2:
                item = items[0]
            else:
                ind = await self.ask_to_choose(ctx, [it.name for it in items])
                if ind is not None:
                    item = items[ind]
            del items
            # Giving item
            if item is not None:
                if item.name.lower() == search2.lower():
                    num = 1
                
                x_item = customer.raw_items.count(item.id)
                if num > x_item:
                    num = x_item
                customer.sell_item(item, num)
                reply = discord.Embed(
                    title="üì¶ | –ü—Ä–æ–¥–∞–Ω–∞ —à–º–æ—Ç–∫–∞",
                    description=f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ **{item.name}** (x{num}) –∏ —Å—Ç–∞–ª–∏ –±–æ–≥–∞—á–µ –Ω–∞ **{item.price * num}**",
                    color=discord.Color.dark_blue()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command(
        aliases=["use-item", "useitem", "use"],
        description="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —à–º–æ—Ç–∫—É. –ü—Ä–∏ —ç—Ç–æ–º –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∫ —à–º–æ—Ç–∫–µ –∫–ª—é—á–∏ –∏ –≤—ã–¥–∞—ë—Ç—Å—è —Ä–æ–ª—å —à–º–æ—Ç–∫–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        brief="–§—É—Ç–±–æ–ª–∫–∞\n–§—É—Ç–±–æ–ª–∫–∞ 3" )
    async def use_item(self, ctx, *, search):
        customer = Customer(ctx.guild.id, ctx.author.id)
        arsearch = search.rsplit(maxsplit=1)
        search2 = ""
        num = 1
        if len(arsearch) > 1 and arsearch[1].isdigit():
            search2 = search
            search = arsearch[0]; num = int(arsearch[1])
        items = customer.search_item(search)

        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search}' –≤ –í–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Giving item
        if item is not None:
            if item.name.lower() == search2.lower():
                num = 1
            
            if item.key_for == [] and item.role is None:
                reply = discord.Embed(
                    title="‚ùå | –í–µ—â—å –Ω–µ –∏–º–µ–µ—Ç —Å–≤–æ–π—Å—Ç–≤",
                    description=f"**{item.name}** –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–ª–∏ —Ä–æ–ª–∏.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            else:
                max_num = customer.raw_items.count(item.id)
                if num > max_num:
                    num = max_num
                new_keys = customer.use_item(item, num)
                await better_add_role(ctx.author, item.role)

                desc = ""
                if new_keys != []:
                    desc += f"> **–ö–ª—é—á–µ–π:** {len(new_keys)} üîë\n"
                if item.role is not None:
                    desc += f"> **–†–æ–ª—å <@&{item.role}>**\n"
                reply = discord.Embed(
                    title="üì¶ | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —à–º–æ—Ç–∫–∞",
                    description=(
                        f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ **{item.name}** (x{num}) –∏ –ø–æ–ª—É—á–∏–ª–∏\n"
                        f"{desc}\n"
                        f"*–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: `{ctx.prefix}inv`*"
                    ),
                    color=discord.Color.dark_blue()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)

    # Case related commands
    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["create-case", "cc", "createcase"],
        description="—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∫–µ–π—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ",
        brief="–§—Ç—É–±–æ–ª–∫–∞" )
    async def create_case(self, ctx, *, name):
        server = ItemStorage(ctx.guild.id, {"cases": True})
        if len(server.cases) >= case_limit:
            reply = discord.Embed(
                title="‚ùå | –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                description=f"–°–æ–∑–¥–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–µ–π—Å–æ–≤ - {case_limit}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        else:
            server.create_case(ctx.message.id, name[:name_limit])
            desc = f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∫–µ–π—Å - {name}.\n**–î–æ–±–∞–≤–∏—Ç—å –ª—É—Ç:** `{ctx.prefix}add-loot`\n"
            if len(name) > name_limit:
                desc += f"*–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–ª–æ {name_limit} —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ*"
            reply = discord.Embed(
                title="üì¶ | –ù–æ–≤—ã–π –∫–µ–π—Å",
                description=desc,
                color=colors.cardboard
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["delete-case", "deletecase", "delc"],
        description="—É–¥–∞–ª—è–µ—Ç –∫–µ–π—Å",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞",
        brief="–ö–µ–π—Å –û–¥–µ–∂–¥—ã" )
    async def delete_case(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"cases": True})
        cases = server.search_cases(search)
        case = None
        if len(cases) == 0:
            reply = discord.Embed(
                title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(cases) < 2:
            case = cases[0]
        else:
            ind = await self.ask_to_choose(ctx, [c.name for c in cases])
            if ind is not None:
                case = cases[ind]
        del cases
        # Visualising item
        if case is not None:
            case.delete()
            reply = discord.Embed(
                title="üì¶ | –£–¥–∞–ª–µ–Ω –∫–µ–π—Å",
                description=f"–ö–µ–π—Å {case.name} –±—ã–ª —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.",
                color=colors.cardboard
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["add-loot", "addloot", "addl"],
        description="–î–æ–±–∞–≤–ª—è–µ—Ç –ª—É—Ç –≤ –∫–µ–π—Å. –î–∞–ª–µ–µ `–í–µ—Å` –±—É–¥–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è. –ß–µ–º –±–æ–ª—å—à–µ –≤–µ—Å - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å.",
        usage="[–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞] –í–µ—Å –ù–∞–∑–≤–∞–Ω–∏–µ_—à–º–æ—Ç–∫–∏",
        brief="[–ö–µ–π—Å –û–¥–µ–∂–¥—ã] 50 –§—É—Ç–±–æ–ª–∫–∞\n[–ö–µ–π—Å –û–¥–µ–∂–¥—ã] 50 –†—É–±–∞—à–∫–∞" )
    async def add_loot(self, ctx, *, string):
        # Unpacking arguments
        case_search, caseargs = unpack_args(string)
        weight, item_search = unpack_case_args(caseargs)
        if None in [weight, item_search]:
            reply = discord.Embed(
                title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
                description=(
                    f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–µ–π—Å–∞ –í—ã —É–∫–∞–∑–∞–ª–∏ `{case_search}`. –ü–æ—Å–ª–µ –Ω–µ–≥–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å `–í–µ—Å` –∏ `–®–º–æ—Ç–∫—É`, –ø—Ä—á—ë–º `–≤–µ—Å` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è.\n"
                    f"–ü—Ä–∏–º–µ—Ä: `{ctx.prefix}add-loot [–ù–µ–∫–∏–π –∫–µ–π—Å] 10 –ù–µ–∫–∞—è —à–º–æ—Ç–∫–∞`"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        
        else:
            # Searching case
            server = ItemStorage(ctx.guild.id, {"items": True, "cases": True})
            _cases = server.search_cases(case_search)
            case = None
            if len(_cases) == 0:
                reply = discord.Embed(
                    title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ü–æ –ø–æ–∏—Å–∫—É '{case_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(_cases) < 2:
                case = _cases[0]
            else:
                ind = await self.ask_to_choose(ctx, [c.name for c in _cases])
                if ind is not None:
                    case = _cases[ind]
            del _cases
            if case is not None:
                # Searching item
                items = server.search_items(item_search)
                item = None
                if len(items) == 0:
                    reply = discord.Embed(
                        title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        description=f"–ü–æ –ø–æ–∏—Å–∫—É '{item_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                        color=discord.Color.dark_red()
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)
                elif len(items) < 2:
                    item = items[0]
                else:
                    ind = await self.ask_to_choose(ctx, [it.name for it in items])
                    if ind is not None:
                        item = items[ind]
                del items
                # Adding item to the case
                if item is not None:
                    case.add_item(item.id, weight)
                    reply = discord.Embed(
                        title="üîë | –î–æ–±–∞–≤–ª–µ–Ω –ª—É—Ç",
                        description=(
                            f"–¢–µ–ø–µ—Ä—å **{item.name}** –≤—ã–ø–∞–¥–∞–µ—Ç –∏–∑ –∫–µ–π—Å–∞ **{case.name}** —Å –≤–µ—Å–æ–º {weight}.\n"
                            f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–µ–π—Å: `{ctx.prefix}case {case.name}`"
                        ),
                        color=colors.cardboard
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["rename-case", "renamecase", "renc"],
        description="–∏–∑–º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞.",
        usage="[–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ] –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        brief="[–ö–µ–π—Å –û–¥–µ–∂–¥—ã] –ö–µ–π—Å —Å –æ–¥–µ–∂–¥–æ–π" )
    async def rename_case(self, ctx, *, string):
        # Unpacking arguments
        case_search, new_name = unpack_args(string)
        if new_name is None:
            reply = discord.Embed(
                title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
                description=(
                    f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–µ–π—Å–∞ –í—ã —É–∫–∞–∑–∞–ª–∏ `{case_search}`. –ü–æ—Å–ª–µ –Ω–µ–≥–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n"
                    f"–ü—Ä–∏–º–µ—Ä: `{ctx.prefix}rename-case [–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ] –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        
        else:
            new_name = new_name[:name_limit]
            # Searching case
            server = ItemStorage(ctx.guild.id, {"cases": True})
            _cases = server.search_cases(case_search)
            case = None
            if len(_cases) == 0:
                reply = discord.Embed(
                    title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ü–æ –ø–æ–∏—Å–∫—É '{case_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(_cases) < 2:
                case = _cases[0]
            else:
                ind = await self.ask_to_choose(ctx, [c.name for c in _cases])
                if ind is not None:
                    case = _cases[ind]
            del _cases
            if case is not None:
                # Renaming case
                case.set_name(new_name)
                reply = discord.Embed(
                    title="üì¶ | –ö–µ–π—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω",
                    description=(
                        f"–¢–µ–ø–µ—Ä—å **{case.name}** –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è **{new_name}**.\n"
                        f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–µ–π—Å: `{ctx.prefix}case {new_name}`"
                    ),
                    color=colors.cardboard
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["case-icon", "caseicon"],
        description="–∏–∑–º–µ–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É –∫–µ–π—Å–∞.",
        usage="[–ù–∞–∑–≤–∞–Ω–∏–µ] (–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ URL)",
        brief="[–ö–µ–π—Å –û–¥–µ–∂–¥—ã] (–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ URL)" )
    async def case_icon(self, ctx, *, string):
        # Unpacking arguments
        case_search, url = unpack_args(string)
        atts = ctx.message.attachments
        if atts != []:
            url = atts[0].url
        if url is None:
            reply = discord.Embed(
                title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
                description="–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞, –Ω–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ **–∫–∞—Ä—Ç–∏–Ω–∫—É** –∏–ª–∏ **—Å—Å—ã–ª–∫—É**, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∏–∫–æ–Ω–∫–æ–π –∫–µ–π—Å–∞.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        
        else:
            # Searching case
            server = ItemStorage(ctx.guild.id, {"cases": True})
            _cases = server.search_cases(case_search)
            case = None
            if len(_cases) == 0:
                reply = discord.Embed(
                    title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ü–æ –ø–æ–∏—Å–∫—É '{case_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(_cases) < 2:
                case = _cases[0]
            else:
                ind = await self.ask_to_choose(ctx, [c.name for c in _cases])
                if ind is not None:
                    case = _cases[ind]
            del _cases
            if case is not None:
                # Setting new url
                case.set_icon_url(url)
                reply = discord.Embed(
                    title="üì¶ | –ò–∫–æ–Ω–∫–∞ –∫–µ–π—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞",
                    description=(
                        f"–ö–µ–π—Å: **{case.name}**\n"
                        f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–µ–π—Å: `{ctx.prefix}case {case.name}`"
                    ),
                    color=colors.cardboard
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["remove-loot", "removeloot", "reml"],
        description="–£–±–∏—Ä–∞–µ—Ç —à–º–æ—Ç–∫—É –∏–∑ –∫–µ–π—Å–∞.",
        usage="[–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞] –ù–∞–∑–≤–∞–Ω–∏–µ_—à–º–æ—Ç–∫–∏",
        brief="[–ö–µ–π—Å –û–¥–µ–∂–¥—ã] –§—É—Ç–±–æ–ª–∫–∞" )
    async def remove_loot(self, ctx, *, string):
        # Unpacking arguments
        case_search, item_search = unpack_args(string)
        if item_search is None:
            reply = discord.Embed(
                title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
                description=(
                    f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–µ–π—Å–∞ –í—ã —É–∫–∞–∑–∞–ª–∏ `{case_search}`. –ü–æ—Å–ª–µ –Ω–µ–≥–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å `–®–º–æ—Ç–∫—É`.\n"
                    f"–ü—Ä–∏–º–µ—Ä: `{ctx.prefix}remove-loot [–ù–µ–∫–∏–π –∫–µ–π—Å] –ù–µ–∫–∞—è —à–º–æ—Ç–∫–∞`"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        
        else:
            # Searching case
            server = ItemStorage(ctx.guild.id, {"items": True, "cases": True})
            _cases = server.search_cases(case_search)
            case = None
            if len(_cases) == 0:
                reply = discord.Embed(
                    title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ü–æ –ø–æ–∏—Å–∫—É '{case_search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(_cases) < 2:
                case = _cases[0]
            else:
                ind = await self.ask_to_choose(ctx, [c.name for c in _cases])
                if ind is not None:
                    case = _cases[ind]
            del _cases
            if case is not None:
                # Searching item
                items = case.search_item(item_search)
                item = None
                if len(items) == 0:
                    reply = discord.Embed(
                        title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        description=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{item_search}' –≤ –∫–µ–π—Å–µ **{case.name}** –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                        color=discord.Color.dark_red()
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)
                elif len(items) < 2:
                    item = items[0]
                else:
                    ind = await self.ask_to_choose(ctx, [it.name for it in items])
                    if ind is not None:
                        item = items[ind]
                del items
                # Removing item from the case
                if item is not None:
                    case.remove_item(item.id)
                    reply = discord.Embed(
                        title="üîë | –£–±—Ä–∞–Ω –ª—É—Ç",
                        description=(
                            f"–¢–µ–ø–µ—Ä—å **{item.name}** –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–∞–¥–∞–µ—Ç –∏–∑ –∫–µ–π—Å–∞ **{case.name}**.\n"
                            f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–µ–π—Å: `{ctx.prefix}case {case.name}`"
                        ),
                        color=colors.cardboard
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["case-config", "caseconfig", "case-conf"],
        description="–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ–π—Å–∞",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞",
        brief="–ö–µ–π—Å –û–¥–µ–∂–¥—ã" )
    async def case_config(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True, "cases": True})
        cases = server.search_cases(search)
        case = None
        if len(cases) == 0:
            reply = discord.Embed(
                title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(cases) < 2:
            case = cases[0]
        else:
            ind = await self.ask_to_choose(ctx, [c.name for c in cases])
            if ind is not None:
                case = cases[ind]
        del cases
        if case is not None:
            # Visualising item
            prcs = case.percentage
            desc = ""
            for i, pair in enumerate(case.loot):
                desc += f"{pair[0].name} | `–í–µ—Å: {pair[1]}` | `~{prcs[i]} %`\n"
            if desc == "":
                desc = "–ù–µ—Ç –ª—É—Ç–∞"
            if case is not None:
                reply = discord.Embed(
                    title=f"üì¶ | {case.name}",
                    color=colors.cardboard
                )
                reply.add_field(name="–®–º–æ—Ç–∫–∞ | `–í–µ—Å` | `–ü—Ä–æ—Ü–µ–Ω—Ç (–∏—Å—Ö–æ–¥—è –∏–∑ –≤–µ—Å–∞)`", value=desc, inline=False)
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                if case.icon_url is not None:
                    reply.set_thumbnail(url=case.icon_url)
                await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.command(
        aliases=["view-cases", "all-cases", "case-list"])
    async def cases(self, ctx):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"cases": True})
        desc = ""
        for case in server.cases:
            desc += f"‚Ä¢ **{case.name}**\n"
        if desc == "":
            desc = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        reply = discord.Embed(
            title=f"üì¶ | –ö–µ–π—Å—ã —Å–µ—Ä–≤–µ—Ä–∞",
            description=desc,
            color=colors.cardboard
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.command(
        aliases=["view-case", "viewcase", "vc", "case"],
        description="–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞",
        brief="–ö–µ–π—Å –û–¥–µ–∂–¥—ã" )
    async def view_case(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True, "cases": True})
        cases = server.search_cases(search)
        case = None
        if len(cases) == 0:
            reply = discord.Embed(
                title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(cases) < 2:
            case = cases[0]
        else:
            ind = await self.ask_to_choose(ctx, [c.name for c in cases])
            if ind is not None:
                case = cases[ind]
        del cases
        if case is not None:
            # Visualising item
            rars = wordlike_rarities(case.percentage)
            desc = ""
            for i, pair in enumerate(case.loot):
                desc += f"‚Ä¢ {pair[0].name} | `{rars[i]}`\n"
            if desc == "":
                desc = "–ù–µ—Ç –ª—É—Ç–∞"
            if case is not None:
                reply = discord.Embed(
                    title=f"üì¶ | {case.name}",
                    color=colors.cardboard
                )
                reply.add_field(name="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ", value=desc, inline=False)
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                if case.icon_url is not None:
                    reply.set_thumbnail(url=case.icon_url)
                await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.command(
        aliases=["open-case", "opencase", "oc", "open"],
        description="–≤—Å–∫—Ä—ã–≤–∞–µ—Ç –∫–µ–π—Å(—ã), –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —É –í–∞—Å –µ—Å—Ç—å –∫–ª—é—á(–∏)",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        brief="–ö–µ–π—Å –û–¥–µ–∂–¥—ã\n–ö–µ–π—Å –û–¥–µ–∂–¥—ã 5" )
    async def open_case(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True, "cy": True, "cases": True})

        arsearch = search.rsplit(maxsplit=1)
        search2 = ""
        num = 1
        if len(arsearch) > 1 and arsearch[1].isdigit():
            search2 = search
            search = arsearch[0]; num = int(arsearch[1])
        cases = server.search_cases(search)
        case = None
        if len(cases) == 0:
            reply = discord.Embed(
                title="‚ùå | –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(cases) < 2:
            case = cases[0]
        else:
            ind = await self.ask_to_choose(ctx, [c.name for c in cases])
            if ind is not None:
                case = cases[ind]
        del cases
        if case is not None:
            if case.name.lower() == search2.lower():
                num = 1
            # Looking at player's inventory
            customer = Customer(ctx.guild.id, ctx.author.id)
            if case.id not in customer.keys:
                reply = discord.Embed(
                    title="‚ùå | –ù–µ—Ç –∫–ª—é—á–∞",
                    description=f"–í –í–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –∫–ª—é—á–∞ –æ—Ç –∫–µ–π—Å–∞ **{case.name}**.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(case.loot) == 0:
                reply = discord.Embed(
                    title="‚ùå | –ö–µ–π—Å –ø—É—Å—Ç",
                    description=f"–ö–µ–π—Å **{case.name}** –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç, –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            elif len(customer.raw_items) >= inv_capacity:
                reply = discord.Embed(
                    title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞",
                    description=f"–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω - –≤ –Ω—ë–º {item_limit} —à–º–æ—Ç–æ–∫. –ü—Ä–æ–¥–∞–π—Ç–µ –ª–∏—à–Ω–µ–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            else:
                items = customer.open_case(case, num)
                items = dupe_dump(items)
                desc = ""
                for item, x in items.items():
                    desc += f"x{x} | **{item.name}** ‚Ä¢ {item.price} {server.cy}\n"

                reply = discord.Embed(
                    title=f"üì¶ | –í—Å–∫—Ä—ã—Ç –∫–µ–π—Å {case.name}",
                    description=f"**–í—ã–ø–∞–≤—à–∏–π –¥—Ä–æ–ø:**\n{desc[:2000]}",
                    color=colors.cardboard
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
    
    # Shop related command—ã
    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["shop-add"],
        description="–¥–æ–±–∞–≤–ª—è–µ—Ç —à–º–æ—Ç–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞.",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏",
        brief="–§—É—Ç–±–æ–ª–∫–∞" )
    async def shop_add(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True, "shop": True})
        items = server.search_items(search)
        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Visualising item
        if item is not None:
            if item.id in server.raw_shop:
                reply = discord.Embed(
                    title="‚ùå | –í–µ—â—å —É–∂–µ –µ—Å—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
                    description=f"–®–º–æ—Ç–∫–∞ **{item.name}** —É–∂–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)

            else:
                server.add_to_shop(item.id)
                reply = discord.Embed(
                    title=f"üõí | –í–µ—â—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω",
                    description=f"**{item.name}** —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
                    color=discord.Color.green()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["shop-remove"],
        description="—É–±–∏—Ä–∞–µ—Ç —à–º–æ—Ç–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏",
        brief="–§—É—Ç–±–æ–ª–∫–∞" )
    async def shop_remove(self, ctx, *, search):
        # Searching item
        shop = ItemStorage(ctx.guild.id, {"items": True, "shop": True}).shop
        items = shop.search_item(search)
        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Visualising item
        if item is not None:
            shop.remove_item(item.id)
            reply = discord.Embed(
                title=f"üõí | –í–µ—â—å —É–±—Ä–∞–Ω–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",
                description=f"**{item.name}** –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
                color=discord.Color.green()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["shop-clear"] )
    async def shop_clear(self, ctx):
        # Verifying deletion
        yes = ["–¥–∞", "yes", "1"]; no = ["–Ω–µ—Ç", "no", "0"]
        tout = 60
        def check(m):
            return m.author.id == ctx.author.id and m.channel.id == ctx.channel.id and m.content.lower() in [*yes, *no]
        try:
            msg = await self.client.wait_for("message", check=check, timeout=tout)
        except asyncio.TimeoutError:
            await ctx.send(ctx.author.mention, embed=timeout_embed(tout, ctx.author))
        else:
            if msg.content.lower() in no:
                await ctx.send("üõí –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            else:
                shop = ItemStorage(ctx.guild.id, {"items": True, "shop": True}).shop
                shop.clear()
                reply = discord.Embed(
                    title=f"üõí | –ú–∞–≥–∞–∑–∏–Ω –æ—á–∏—â–µ–Ω",
                    description="–ü–æ–ª–∫–∏ –∏ –≤–∏—Ç—Ä–∏–Ω—ã –ø—É—Å—Ç—É—é—Ç.",
                    color=discord.Color.green()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)

    
    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.command(
        aliases=["buy-item"],
        description="–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∫—É–ø–∫—É —à–º–æ—Ç–∫–∏.",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ —à–º–æ—Ç–∫–∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        brief="–§—É—Ç–±–æ–ª–∫–∞\n–§—É—Ç–±–æ–ª–∫–∞ 3" )
    async def buy(self, ctx, *, search):
        # Searching item
        server = ItemStorage(ctx.guild.id, {"items": True, "shop": True, "cy": True})
        shop = server.shop
        cy = server.cy
        p = ctx.prefix
        del server

        arsearch = search.rsplit(maxsplit=1)
        search2 = ""
        num = 1
        if len(arsearch) > 1 and arsearch[1].isdigit():
            search2 = search
            search = arsearch[0]; num = int(arsearch[1])
        items = shop.search_item(search)

        item = None
        if len(items) == 0:
            reply = discord.Embed(
                title="‚ùå | –í–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–ü–æ –ø–æ–∏—Å–∫—É '{search}' –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —à–º–æ—Ç–æ–∫.\n–ú–∞–≥–∞–∑–∏–Ω: `{p}shop`",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        elif len(items) < 2:
            item = items[0]
        else:
            ind = await self.ask_to_choose(ctx, [it.name for it in items])
            if ind is not None:
                item = items[ind]
        del items
        # Visualising item
        if item is not None:
            del shop
            if item.name.lower() == search2.lower():
                num = 1
            
            total_cost = num * item.price
            customer = Customer(ctx.guild.id, ctx.author.id)
            # Checking balance
            if customer.balance < total_cost:
                reply = discord.Embed(
                    title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥",
                    description=f"**{item.name}** (x{num}) —Å—Ç–æ–∏—Ç **{total_cost}** {cy}, –∞ –í–∞—à –±–∞–ª–∞–Ω—Å - **{customer.balance}** {cy}",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)

            else:
                num = customer.buy(item, num)
                if num is None:
                    reply = discord.Embed(
                        title="‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ",
                        description=f"–í—Å–µ —è—á–µ–π–∫–∏ –∑–∞–±–∏—Ç—ã. –í—Å–µ–≥–æ —è—á–µ–µ–∫: **x{inv_capacity}**",
                        color=discord.Color.dark_red()
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)
                
                else:
                    total_cost = num * item.price
                    reply = discord.Embed(
                        title=f"üõí | –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                        description=(
                            f"**–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ:** {item.name} (x{num})\n"
                            f"**–¶–µ–Ω–∞:** {total_cost} {cy}\n\n"
                            f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:** `{p}use {item.name}`\n"
                            f"**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:** `{p}inv`"
                        ),
                        color=colors.emerald
                    )
                    reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                    await ctx.send(embed=reply)


    @commands.cooldown(1, 2, commands.BucketType.member)
    @commands.command(
        aliases=["server-shop"] )
    async def shop(self, ctx, page: int=1):
        interval = 10
        server = ItemStorage(ctx.guild.id, {"items": True, "shop": True, "cy": True})
        shop = server.shop
        cy = server.cy
        del server

        total_items = len(shop.items)
        total_pages = abs(total_items - 1) // interval + 1
        if page > total_pages or page < 1:
            reply = discord.Embed(
                title="‚ùå | –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                description=f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            reply = discord.Embed(
                title=f"üõí | –ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞",
                description="",
                color=colors.emerald
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            
            lind = (page - 1) * interval
            uind = min(page * interval, total_items)
            for i in range(lind, uind):
                item = shop.items[i]
                reply.add_field(name=f"`{i + 1}.` {item.name}", value=f"> **–¶–µ–Ω–∞:** {item.price} {cy}", inline=False)
            if uind == 0:
                reply.description = "–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ üß∏"
            
            reply.set_footer(text=f"–°—Ç—Ä. {page} / {total_pages} | {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

    # Money related commands
    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["change-bal", "cb", "change", "add-money", "change-balance"],
        description="–∏–∑–º–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        usage="–ö–æ–ª-–≤–æ @–£—á–∞—Å—Ç–Ω–∏–∫",
        brief="-6 @User#1234" )
    async def change_bal(self, ctx, amount: int, *, member: discord.Member=None):
        if member is None:
            member = ctx.author
        
        amount_desc = f"{amount}"
        if amount_desc[0] != "-":
            amount_desc = f"+{amount_desc}"

        eco = ItemStorage(ctx.guild.id, {"cy": True})
        customer = Customer(ctx.guild.id, member.id)
        customer.inc_bal(amount)
        reply = discord.Embed(
            title="‚ôª –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"{amount_desc} {eco.cy} —É—á–∞—Å—Ç–Ω–∏–∫—É **{member}**",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["reset-top", "rt", "resettop"],
        description="–æ–±–Ω—É–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
        usage="",
        brief="" )
    async def reset_top(self, ctx):
        clist = CustomerList(ctx.guild.id)
        clist.reset_money()
        reply = discord.Embed(
            title="‚ôª –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω—É–ª—ë–Ω",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["clear-inventories", "clear-invs", "clearinvs", "cinvs"],
        description="–æ—á–∏—â–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        usage="",
        brief="" )
    async def clear_inventories(self, ctx):
        clist = CustomerList(ctx.guild.id)
        clist.clear_inventories()
        reply = discord.Embed(
            title="‚ôª –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω—ã.",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.check_any(
        is_moderator(),
        commands.has_permissions(administrator=True) )
    @commands.command(
        aliases=["clear-keys", "ck", "clearkeys", "removekeys"] )
    async def clear_keys(self, ctx):
        clist = CustomerList(ctx.guild.id)
        clist.clear_keys()
        reply = discord.Embed(
            title="‚ôª –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            description=f"–ö–ª—é—á–∏ –æ—Ç–æ–±—Ä–∞–Ω—ã —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
        await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.command(aliases=["bal", "inventory", "inv"])
    async def balance(self, ctx, *, member: discord.Member=None):
        if member is None:
            member = ctx.author
        customer = Customer(ctx.guild.id, member.id)
        eco = ItemStorage(ctx.guild.id, {"cy": True, "cases": True})

        item_desc = ""
        for item, amount in dupe_dump(customer.items).items():
            item_desc += f"> **{item.name}** (x{amount})\n"
        keys = dupe_dump(customer.keys)
        keys_desc = ""
        for case in eco.cases:
            if case.id in keys:
                keys_desc += f"> **{case.name}** (x{keys[case.id]})\n"
        
        reply = discord.Embed(
            title=f"üì¶ | –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {member}",
            color=member.color
        )
        reply.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"> **{customer.balance}** {eco.cy}", inline=False)
        if item_desc != "":
            reply.add_field(name="üß∏ –®–º–æ—Ç–∫–∏", value=item_desc)
        if keys_desc != "":
            reply.add_field(name="üîë –ö–ª—é—á–∏", value=keys_desc)
        reply.set_thumbnail(url=member.avatar_url)
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.command(aliases=["leaderboard", "leaders", "lb"])
    async def top(self, ctx, page: int=1):
        interval = 10
        member_list = CustomerList(ctx.guild.id).customers
        cur = ItemStorage(ctx.guild.id, {"cy": True}).cy

        if member_list == []:
            reply = discord.Embed(
                title="üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                description="–ü—É—Å—Ç",
                color=ctx.guild.me.color
            )
            reply.set_thumbnail(url=f"{ctx.guild.icon_url}")
            await ctx.send(embed=reply)
        
        else:
            total_pairs = len(member_list)
            total_pages = abs(total_pairs - 1) // interval + 1
            if page > total_pages or page < 1:
                reply = discord.Embed(
                    title="üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description=f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
                )
                reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
                await ctx.send(embed=reply)
            
            else:
                member_list.sort(reverse=True, key=lambda cust: cust.balance)
                lower_bound = (page - 1) * interval
                upper_bound = min(page * interval, total_pairs)

                desc = ""
                for i in range(lower_bound, upper_bound):
                    cust = member_list[i]
                    member = ctx.guild.get_member(cust.id)
                    desc += f"**{i + 1}.** {anf(member)} ‚Ä¢ **{cust.balance}** {cur}\n"
                
                reply = discord.Embed(
                    title="üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    description=desc,
                    color=ctx.guild.me.color
                )
                reply.set_thumbnail(url=f"{ctx.guild.icon_url}")
                reply.set_footer(text=f"–°—Ç—Ä. {page} / {total_pages} | {ctx.author}", icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)


    @commands.cooldown(1, 3, commands.BucketType.member)
    @commands.command(
        description="–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        usage="–ö–æ–ª-–≤–æ @–£—á–∞—Å—Ç–Ω–∏–∫",
        brief="60 @User#1234" )
    async def pay(self, ctx, amount: int, *, member: discord.Member):
        customer = Customer(ctx.guild.id, ctx.author.id)
        server = ItemStorage(ctx.guild.id, {"cy": True})
        
        if ctx.author.id == member.id:
            reply = discord.Embed(
                title="‚ùå | –û—à–∏–±–∫–∞",
                description="–°–∞–º–æ–º—É —Å–µ–±–µ –ø–ª–∞—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)

        elif amount > customer.balance or amount < 1:
            reply = discord.Embed(
                title="üí¢ –û—à–∏–±–∫–∞",
                description="–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)
        
        else:
            customer.pay_to(member.id, amount)
            reply = discord.Embed(
                title="‚ôª –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                description=f"–ù–∞ –±–∞–ª–∞–Ω—Å {member} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} {server.cy}",
                color=discord.Color.dark_green()
            )
            reply.set_footer(text=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")
            await ctx.send(embed=reply)


def setup(client):
    client.add_cog(economy(client))
