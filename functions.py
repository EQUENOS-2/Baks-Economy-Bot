import failures
import discord
from discord.ext import commands
from db_models import ServerConfig

#-------------------------------------+
#             Constants               |
#-------------------------------------+
owner_ids = [
    301295716066787332
]
perms_tr = {
    "create_instant_invite": "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
    "kick_members": "–ö–∏–∫–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "ban_members": "–ë–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "administrator": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "manage_channels": "–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏",
    "manage_guild": "–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–º",
    "add_reactions": "–î–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏",
    "view_audit_log": "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞",
    "priority_speaker": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º",
    "stream": "–í–∏–¥–µ–æ",
    "read_messages": "–ß–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
    "view_channel": "–í–∏–¥–µ—Ç—å –∫–∞–Ω–∞–ª",
    "send_messages": "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
    "send_tts_messages": "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å TTS —Å–æ–æ–±—â–µ–Ω–∏—è",
    "manage_messages": "–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
    "embed_links": "–í—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏",
    "attach_files": "–ü—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã",
    "read_message_history": "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π",
    "mention_everyone": "–£–ø–æ–º–∏–Ω–∞—Ç—å everyone / here",
    "external_emojis": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ —ç–º–æ–¥–∑–∏",
    "view_guild_insights": "View server insights",
    "connect": "–ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è",
    "speak": "–ì–æ–≤–æ—Ä–∏—Ç—å",
    "mute_members": "–í—ã–∫–ª—é—á–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "deafen_members": "–ó–∞–≥–ª—É—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "move_members": "–ü–µ—Ä–µ–º–µ—â–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "use_voice_activation": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Ü–∏–∏",
    "change_nickname": "–ò–∑–º–µ–Ω—è—Ç—å –Ω–∏–∫–Ω–µ–π–º",
    "manage_nicknames": "–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏",
    "manage_roles": "–£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏",
    "manage_permissions": "–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∞–º–∏",
    "manage_webhooks": "–£–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ–±—Ö—É–∫–∞–º–∏",
    "manage_emojis": "–£–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏"
}

#-------------------------------------+
#            Custom Checks            |
#-------------------------------------+
def is_moderator():
    def predicate(ctx):
        server = ServerConfig(ctx.guild.id)
        mod_role_ids = server.mod_roles
        author_role_ids = [r.id for r in ctx.author.roles]
        has = False
        for role_id in mod_role_ids:
            if role_id in author_role_ids:
                has = True
                break
        if has:
            return True
        else:
            raise failures.IsNotModerator()
    return commands.check(predicate)

#-------------------------------------+
#           Other functions           |
#-------------------------------------+
def timeout_embed(timeout, reciever):
    if timeout % 10 == 1:
        timeword = "—Å–µ–∫—É–Ω–¥—ã"
    else:
        timeword = "—Å–µ–∫—É–Ω–¥"
    reply = discord.Embed(
        title="üïë –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
        description=f"{antiformat(reciever)}, –í—ã –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –±–æ–ª—å—à–µ {timeout} {timeword}.",
        color=discord.Color.blurple()
    )
    reply.set_footer(text=str(reciever), icon_url=reciever.avatar_url)
    return reply


def antiformat(text):
    formers = "~`*_|>\\"
    out = ""
    for s in str(text):
        if s in formers:
            out += "\\" + s
        else:
            out += s
    return out


def quote_list(_list):
    return "\n".join([f"> {elem}" for elem in _list])


def display_perms(missing_perms):
    out = ""
    for perm in missing_perms:
        out += f"> {perms_tr[perm]}\n"
    return out


def vis_aliases(aliases):
    if aliases not in [None, []]:
        out = "**–°–∏–Ω–æ–Ω–∏–º—ã:** "
        for a in aliases:
            out += f"`{a}`, "
        return out[:-2]
    else:
        return ""


def pick_wordform(number: int, all_forms: list):
    """NOTE: all_forms = ["–î–µ–Ω—å" (–æ–¥–∏–Ω), "–î–Ω—è" (–¥–≤–∞), "–î–Ω–µ–π" (–ø—è—Ç—å)]"""
    if 10 < number < 20:
        return all_forms[2]
    else:
        number = number % 10
        if number == 1: return all_forms[0]
        elif 1 < number < 5: return all_forms[1]
        else: return all_forms[2]


def visual_delta(delta):
    if isinstance(delta, int):
        seconds = delta
        t_days = 0
    else:
        seconds = delta.seconds
        t_days = delta.days
    
    expanded_delta = {
        "—Å–µ–∫": seconds % 60,
        "–º–∏–Ω": seconds // 60 % 60,
        "—á": seconds // 3600 % 24,
        "–¥–Ω": t_days % 7,
        "–Ω–µ–¥": t_days // 7
    }
    expwords = {
        "—Å–µ–∫": ["—Å–µ–∫—É–Ω–¥–∞", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥"],
        "–º–∏–Ω": ["–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç"],
        "—á": ["—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"],
        "–¥–Ω": ["–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"],
        "–Ω–µ–¥": ["–Ω–µ–¥–µ–ª—è", "–Ω–µ–¥–µ–ª–∏", "–Ω–µ–¥–µ–ª—å"]
    }

    out = ""
    for key in expanded_delta:
        num = expanded_delta[key]
        if num > 0:
            word = pick_wordform(num, expwords[key])
            out = f"{num} {word} " + out
    if out == "":
        out = "0.1 —Å–µ–∫—É–Ω–¥"
    out.strip()
    return out


def rus_timestamp(datetime):
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è",
        "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è",
        "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞",
        "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è",
        "–¥–µ–∫–∞–±—Ä—è"
    ]
    date = f"{datetime.day} {months[datetime.month - 1]} {datetime.year}"
    time = f"{datetime}"[-15:][:+8]
    return f"{date}, {time}"


def get_field(Dict, *key_words, default=None):
    if Dict is not None:
        for key in key_words:
            if key in Dict:
                Dict = Dict[key]
            else:
                Dict = None
                break
    if Dict is None:
        Dict = default
    return Dict


def find_alias(table: dict, value):
    out = None
    value = str(value).lower()
    for key in table:
        arr = [key, *table[key]]
        for elem in arr:
            if elem.lower().startswith(value):
                out = key
                break
        if out is not None:
            break
    return out


def carve_int(string):
    nums = [str(i) for i in range(10)]
    out = ""
    found = False
    for letter in string:
        if letter in nums:
            found = True
            out += letter
        elif found:
            break
    if out == "":
        out = None
    else:
        out = int(out)
    return out


def try_int(string):
    try:
        return int(string)
    except ValueError:
        return None


def has_permissions(member, perm_array):
    if member.id in owner_ids:
        return True
    else:
        perms_owned = dict(member.guild_permissions)
        total_needed = len(perm_array)
        for perm in perm_array:
            if perms_owned[perm]:
                total_needed -= 1
        return total_needed == 0


def is_command(client, prefix, text):
    out = False
    text = text.split()[0]
    if text.startswith(prefix):
        text = text[len(prefix):]
        for cmd in client.commands:
            if text == cmd.name or text in cmd.aliases:
                out = True
                break
    return out


def carve_cmd(prefix, text):
    text = text.split()[0]
    if text.startswith(prefix):
        return text[len(prefix):]


class detect:
    @staticmethod
    def member(guild, search):
        ID = carve_int(search)
        if ID is None:
            ID = 0
        member = guild.get_member(ID)
        if member is None:
            member = guild.get_member_named(search)
        return member
    
    @staticmethod
    def channel(guild, search):
        ID = carve_int(search)
        if ID is None:
            ID = 0
        channel = guild.get_channel(ID)
        if channel is None:
            for c in guild.channels:
                if c.name == search:
                    channel = c
                    break
        return channel
    
    @staticmethod
    def role(guild, search):
        ID = carve_int(search)
        if ID is None:
            ID = 0
        role = guild.get_role(ID)
        if role is None:
            for r in guild.roles:
                if r.name == search:
                    role = r
                    break
        return role
    
    @staticmethod
    def user(search, client):
        ID = carve_int(search)
        user = None
        if ID is not None:
            user = client.get_user(ID)
        return user


class CustomColor:
    def __init__(self):
        self.cardboard = int("FFCC84", 16)
        self.emerald = int("5DE897", 16)


class Custom_emoji:
    def __init__(self, client):
        self.server = client.get_guild(698646973347266560)
    
    def __call__(self, emoji_name):
        out = None
        for emoji in self.server.emojis:
            if emoji.name == emoji_name:
                out = emoji
                break
        return out

